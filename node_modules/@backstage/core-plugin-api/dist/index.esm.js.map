{"version":3,"file":"index.esm.js","sources":["../src/lib/globalObject.ts","../src/lib/versionedValues.ts","../src/apis/system/useApi.tsx","../src/apis/system/ApiRef.ts","../src/apis/system/helpers.ts","../src/apis/definitions/auth.ts","../src/apis/definitions/AlertApi.ts","../src/apis/definitions/AppThemeApi.ts","../src/apis/definitions/ConfigApi.ts","../src/apis/definitions/DiscoveryApi.ts","../src/apis/definitions/ErrorApi.ts","../src/apis/definitions/FeatureFlagsApi.ts","../src/apis/definitions/IdentityApi.ts","../src/apis/definitions/OAuthRequestApi.ts","../src/apis/definitions/StorageApi.ts","../src/app/useApp.tsx","../src/extensions/componentData.tsx","../src/routing/types.ts","../src/routing/RouteRef.ts","../src/routing/SubRouteRef.ts","../src/routing/ExternalRouteRef.ts","../src/routing/useRouteRef.tsx","../src/routing/useRouteRefParams.ts","../src/extensions/PluginErrorBoundary.tsx","../src/extensions/extensions.tsx","../src/extensions/useElementFilter.tsx","../src/plugin/Plugin.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nfunction getGlobalObject() {\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  }\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n  // eslint-disable-next-line no-new-func\n  return Function('return this')();\n}\n\nconst globalObject = getGlobalObject();\n\nconst makeKey = (id: string) => `__@backstage/${id}__`;\n\n/**\n * Used to provide a global singleton value, failing if it is already set.\n */\nexport function setGlobalSingleton(id: string, value: unknown): void {\n  const key = makeKey(id);\n  if (key in globalObject) {\n    throw new Error(`Global ${id} is already set`);\n  }\n  globalObject[key] = value;\n}\n\n/**\n * Used to access a global singleton value, failing if it is not already set.\n */\nexport function getGlobalSingleton<T>(id: string): T {\n  const key = makeKey(id);\n  if (!(key in globalObject)) {\n    throw new Error(`Global ${id} is not set`);\n  }\n\n  return globalObject[key];\n}\n\n/**\n * Serializes access to a global singleton value, with the first caller creating the value.\n */\nexport function getOrCreateGlobalSingleton<T>(\n  id: string,\n  supplier: () => T,\n): T {\n  const key = makeKey(id);\n\n  let value = globalObject[key];\n  if (value) {\n    return value;\n  }\n\n  value = supplier();\n  globalObject[key] = value;\n  return value;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext, useContext, Context } from 'react';\nimport { getGlobalSingleton, setGlobalSingleton } from './globalObject';\n\n/**\n * The versioned value interface is a container for a set of values that\n * can be looked up by version. It is intended to be used as a container\n * for values that can be versioned independently of package versions.\n */\nexport type VersionedValue<Versions extends { [version: number]: any }> = {\n  atVersion<Version extends keyof Versions>(\n    version: Version,\n  ): Versions[Version] | undefined;\n};\n\n/**\n * Creates a container for a map of versioned values that implements VersionedValue.\n */\nexport function createVersionedValueMap<\n  Versions extends { [version: number]: any },\n>(versions: Versions): VersionedValue<Versions> {\n  Object.freeze(versions);\n  return {\n    atVersion(version) {\n      return versions[version];\n    },\n  };\n}\n\nexport function useVersionedContext<\n  Versions extends { [version in number]: any },\n>(key: string): VersionedValue<Versions> {\n  const versionedValue = useContext(\n    getGlobalSingleton<Context<VersionedValue<Versions>>>(key),\n  );\n  if (!versionedValue) {\n    throw new Error(`No provider available for ${key} context`);\n  }\n  return versionedValue;\n}\n\nexport function createVersionedContextForTesting(key: string) {\n  return {\n    set(versions: { [version in number]: unknown }) {\n      setGlobalSingleton(key, createContext(createVersionedValueMap(versions)));\n    },\n    reset() {\n      delete (globalThis as any)[`__@backstage/${key}__`];\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PropsWithChildren } from 'react';\nimport { ApiRef, ApiHolder, TypesToApiRefs } from './types';\nimport { useVersionedContext } from '../../lib/versionedValues';\n\nexport function useApiHolder(): ApiHolder {\n  const versionedHolder = useVersionedContext<{ 1: ApiHolder }>('api-context');\n\n  const apiHolder = versionedHolder.atVersion(1);\n  if (!apiHolder) {\n    throw new Error('ApiContext v1 not available');\n  }\n  return apiHolder;\n}\n\nexport function useApi<T>(apiRef: ApiRef<T>): T {\n  const apiHolder = useApiHolder();\n\n  const api = apiHolder.get(apiRef);\n  if (!api) {\n    throw new Error(`No implementation available for ${apiRef}`);\n  }\n  return api;\n}\n\nexport function withApis<T>(apis: TypesToApiRefs<T>) {\n  return function withApisWrapper<P extends T>(\n    WrappedComponent: React.ComponentType<P>,\n  ) {\n    const Hoc = (props: PropsWithChildren<Omit<P, keyof T>>) => {\n      const apiHolder = useApiHolder();\n\n      const impls = {} as T;\n\n      for (const key in apis) {\n        if (apis.hasOwnProperty(key)) {\n          const ref = apis[key];\n\n          const api = apiHolder.get(ref);\n          if (!api) {\n            throw new Error(`No implementation available for ${ref}`);\n          }\n          impls[key] = api;\n        }\n      }\n\n      return <WrappedComponent {...(props as P)} {...impls} />;\n    };\n    const displayName =\n      WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n    Hoc.displayName = `withApis(${displayName})`;\n\n    return Hoc;\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ApiRef } from './types';\n\nexport type ApiRefConfig = {\n  id: string;\n  /**\n   * @deprecated Will be removed in the future\n   */\n  description?: string;\n};\n\nclass ApiRefImpl<T> implements ApiRef<T> {\n  constructor(private readonly config: ApiRefConfig) {\n    const valid = config.id\n      .split('.')\n      .flatMap(part => part.split('-'))\n      .every(part => part.match(/^[a-z][a-z0-9]*$/));\n    if (!valid) {\n      throw new Error(\n        `API id must only contain period separated lowercase alphanum tokens with dashes, got '${config.id}'`,\n      );\n    }\n  }\n\n  get id(): string {\n    return this.config.id;\n  }\n\n  get description() {\n    // eslint-disable-next-line no-console\n    console.warn('Deprecated use of ApiRef.description');\n    return this.config.description;\n  }\n\n  // Utility for getting type of an api, using `typeof apiRef.T`\n  get T(): T {\n    throw new Error(`tried to read ApiRef.T of ${this}`);\n  }\n\n  toString() {\n    return `apiRef{${this.config.id}}`;\n  }\n}\n\nexport function createApiRef<T>(config: ApiRefConfig): ApiRef<T> {\n  return new ApiRefImpl<T>(config);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, ApiFactory, TypesToApiRefs } from './types';\n\n/**\n * Used to infer types for a standalone ApiFactory that isn't immediately passed\n * to another function.\n * This function doesn't actually do anything, it's only used to infer types.\n */\nexport function createApiFactory<\n  Api,\n  Impl extends Api,\n  Deps extends { [name in string]: unknown },\n>(factory: ApiFactory<Api, Impl, Deps>): ApiFactory<Api, Impl, Deps>;\nexport function createApiFactory<Api, Impl extends Api>(\n  api: ApiRef<Api>,\n  instance: Impl,\n): ApiFactory<Api, Impl, {}>;\nexport function createApiFactory<\n  Api,\n  Impl extends Api,\n  Deps extends { [name in string]: unknown },\n>(\n  factory: ApiFactory<Api, Impl, Deps> | ApiRef<Api>,\n  instance?: Impl,\n): ApiFactory<Api, Impl, Deps> {\n  if ('id' in factory) {\n    return {\n      api: factory,\n      deps: {} as TypesToApiRefs<Deps>,\n      factory: () => instance!,\n    };\n  }\n  return factory;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '../../types';\n\n/**\n * This file contains declarations for common interfaces of auth-related APIs.\n * The declarations should be used to signal which type of authentication and\n * authorization methods each separate auth provider supports.\n *\n * For example, a Google OAuth provider that supports OAuth 2 and OpenID Connect,\n * would be declared as follows:\n *\n * const googleAuthApiRef = createApiRef<OAuthApi & OpenIDConnectApi>({ ... })\n */\n\n/**\n * An array of scopes, or a scope string formatted according to the\n * auth provider, which is typically a space separated list.\n *\n * See the documentation for each auth provider for the list of scopes\n * supported by each provider.\n */\nexport type OAuthScope = string | string[];\n\nexport type AuthRequestOptions = {\n  /**\n   * If this is set to true, the user will not be prompted to log in,\n   * and an empty response will be returned if there is no existing session.\n   *\n   * This can be used to perform a check whether the user is logged in, or if you don't\n   * want to force a user to be logged in, but provide functionality if they already are.\n   *\n   * @default false\n   */\n  optional?: boolean;\n\n  /**\n   * If this is set to true, the request will bypass the regular oauth login modal\n   * and open the login popup directly.\n   *\n   * The method must be called synchronously from a user action for this to work in all browsers.\n   *\n   * @default false\n   */\n  instantPopup?: boolean;\n};\n\n/**\n * This API provides access to OAuth 2 credentials. It lets you request access tokens,\n * which can be used to act on behalf of the user when talking to APIs.\n */\nexport type OAuthApi = {\n  /**\n   * Requests an OAuth 2 Access Token, optionally with a set of scopes. The access token allows\n   * you to make requests on behalf of the user, and the copes may grant you broader access, depending\n   * on the auth provider.\n   *\n   * Each auth provider has separate handling of scope, so you need to look at the documentation\n   * for each one to know what scope you need to request.\n   *\n   * This method is cheap and should be called each time an access token is used. Do not for example\n   * store the access token in React component state, as that could cause the token to expire. Instead\n   * fetch a new access token for each request.\n   *\n   * Be sure to include all required scopes when requesting an access token. When testing your implementation\n   * it is best to log out the Backstage session and then visit your plugin page directly, as\n   * you might already have some required scopes in your existing session. Not requesting the correct\n   * scopes can lead to 403 or other authorization errors, which can be tricky to debug.\n   *\n   * If the user has not yet granted access to the provider and the set of requested scopes, the user\n   * will be prompted to log in. The returned promise will not resolve until the user has\n   * successfully logged in. The returned promise can be rejected, but only if the user rejects the login request.\n   */\n  getAccessToken(\n    scope?: OAuthScope,\n    options?: AuthRequestOptions,\n  ): Promise<string>;\n};\n\n/**\n * This API provides access to OpenID Connect credentials. It lets you request ID tokens,\n * which can be passed to backend services to prove the user's identity.\n */\nexport type OpenIdConnectApi = {\n  /**\n   * Requests an OpenID Connect ID Token.\n   *\n   * This method is cheap and should be called each time an ID token is used. Do not for example\n   * store the id token in React component state, as that could cause the token to expire. Instead\n   * fetch a new id token for each request.\n   *\n   * If the user has not yet logged in to Google inside Backstage, the user will be prompted\n   * to log in. The returned promise will not resolve until the user has successfully logged in.\n   * The returned promise can be rejected, but only if the user rejects the login request.\n   */\n  getIdToken(options?: AuthRequestOptions): Promise<string>;\n};\n\n/**\n * This API provides access to profile information of the user from an auth provider.\n */\nexport type ProfileInfoApi = {\n  /**\n   * Get profile information for the user as supplied by this auth provider.\n   *\n   * If the optional flag is not set, a session is guaranteed to be returned, while if\n   * the optional flag is set, the session may be undefined. See @AuthRequestOptions for more details.\n   */\n  getProfile(options?: AuthRequestOptions): Promise<ProfileInfo | undefined>;\n};\n\n/**\n * This API provides access to the user's identity within Backstage.\n *\n * An auth provider that implements this interface can be used to sign-in to backstage. It is\n * not intended to be used directly from a plugin, but instead serves as a connection between\n * this authentication method and the app's @IdentityApi\n */\nexport type BackstageIdentityApi = {\n  /**\n   * Get the user's identity within Backstage. This should normally not be called directly,\n   * use the @IdentityApi instead.\n   *\n   * If the optional flag is not set, a session is guaranteed to be returned, while if\n   * the optional flag is set, the session may be undefined. See @AuthRequestOptions for more details.\n   */\n  getBackstageIdentity(\n    options?: AuthRequestOptions,\n  ): Promise<BackstageIdentity | undefined>;\n};\n\nexport type BackstageIdentity = {\n  /**\n   * The backstage user ID.\n   */\n  id: string;\n\n  /**\n   * @deprecated This is deprecated, use `token` instead.\n   */\n  idToken: string;\n\n  /**\n   * The token used to authenticate the user within Backstage.\n   */\n  token: string;\n};\n\n/**\n * Profile information of the user.\n */\nexport type ProfileInfo = {\n  /**\n   * Email ID.\n   */\n  email?: string;\n\n  /**\n   * Display name that can be presented to the user.\n   */\n  displayName?: string;\n\n  /**\n   * URL to an avatar image of the user.\n   */\n  picture?: string;\n};\n\n/**\n * Session state values passed to subscribers of the SessionApi.\n */\nexport enum SessionState {\n  SignedIn = 'SignedIn',\n  SignedOut = 'SignedOut',\n}\n\n/**\n * The SessionApi provides basic controls for any auth provider that is tied to a persistent session.\n */\nexport type SessionApi = {\n  /**\n   * Sign in with a minimum set of permissions.\n   */\n  signIn(): Promise<void>;\n\n  /**\n   * Sign out from the current session. This will reload the page.\n   */\n  signOut(): Promise<void>;\n\n  /**\n   * Observe the current state of the auth session. Emits the current state on subscription.\n   */\n  sessionState$(): Observable<SessionState>;\n};\n\n/**\n * Provides authentication towards Google APIs and identities.\n *\n * See https://developers.google.com/identity/protocols/googlescopes for a full list of supported scopes.\n *\n * Note that the ID token payload is only guaranteed to contain the user's numerical Google ID,\n * email and expiration information. Do not rely on any other fields, as they might not be present.\n */\nexport const googleAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.google',\n});\n\n/**\n * Provides authentication towards GitHub APIs.\n *\n * See https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\n * for a full list of supported scopes.\n */\nexport const githubAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.github',\n});\n\n/**\n * Provides authentication towards Okta APIs.\n *\n * See https://developer.okta.com/docs/guides/implement-oauth-for-okta/scopes/\n * for a full list of supported scopes.\n */\nexport const oktaAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.okta',\n});\n\n/**\n * Provides authentication towards GitLab APIs.\n *\n * See https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#limiting-scopes-of-a-personal-access-token\n * for a full list of supported scopes.\n */\nexport const gitlabAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.gitlab',\n});\n\n/**\n * Provides authentication towards Auth0 APIs.\n *\n * See https://auth0.com/docs/scopes/current/oidc-scopes\n * for a full list of supported scopes.\n */\nexport const auth0AuthApiRef: ApiRef<\n  OpenIdConnectApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.auth0',\n});\n\n/**\n * Provides authentication towards Microsoft APIs and identities.\n *\n * For more info and a full list of supported scopes, see:\n * - https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent\n * - https://docs.microsoft.com/en-us/graph/permissions-reference\n */\nexport const microsoftAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.microsoft',\n});\n\n/**\n * Provides authentication for custom identity providers.\n */\nexport const oauth2ApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.oauth2',\n});\n\n/**\n * Provides authentication for custom OpenID Connect identity providers.\n */\nexport const oidcAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.oidc',\n});\n\n/**\n * Provides authentication for saml based identity providers\n */\nexport const samlAuthApiRef: ApiRef<\n  ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.saml',\n});\n\nexport const oneloginAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.onelogin',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createApiRef, ApiRef } from '../system';\nimport { Observable } from '../../types';\n\nexport type AlertMessage = {\n  message: string;\n  // Severity will default to success since that is what material ui defaults the value to.\n  severity?: 'success' | 'info' | 'warning' | 'error';\n};\n\n/**\n * The alert API is used to report alerts to the app, and display them to the user.\n */\n\nexport type AlertApi = {\n  /**\n   * Post an alert for handling by the application.\n   */\n  post(alert: AlertMessage): void;\n\n  /**\n   * Observe alerts posted by other parts of the application.\n   */\n  alert$(): Observable<AlertMessage>;\n};\n\nexport const alertApiRef: ApiRef<AlertApi> = createApiRef({\n  id: 'core.alert',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { BackstageTheme } from '@backstage/theme';\nimport { Observable } from '../../types';\n\n/**\n * Describes a theme provided by the app.\n */\nexport type AppTheme = {\n  /**\n   * ID used to remember theme selections.\n   */\n  id: string;\n\n  /**\n   * Title of the theme\n   */\n  title: string;\n\n  /**\n   * Theme variant\n   */\n  variant: 'light' | 'dark';\n\n  /**\n   * The specialized MaterialUI theme instance.\n   */\n  theme: BackstageTheme;\n\n  /**\n   * An Icon for the theme mode setting.\n   */\n  icon?: React.ReactElement;\n};\n\n/**\n * The AppThemeApi gives access to the current app theme, and allows switching\n * to other options that have been registered as a part of the App.\n */\nexport type AppThemeApi = {\n  /**\n   * Get a list of available themes.\n   */\n  getInstalledThemes(): AppTheme[];\n\n  /**\n   * Observe the currently selected theme. A value of undefined means no specific theme has been selected.\n   */\n  activeThemeId$(): Observable<string | undefined>;\n\n  /**\n   * Get the current theme ID. Returns undefined if no specific theme is selected.\n   */\n  getActiveThemeId(): string | undefined;\n\n  /**\n   * Set a specific theme to use in the app, overriding the default theme selection.\n   *\n   * Clear the selection by passing in undefined.\n   */\n  setActiveThemeId(themeId?: string): void;\n};\n\nexport const appThemeApiRef: ApiRef<AppThemeApi> = createApiRef({\n  id: 'core.apptheme',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\nimport { Config } from '@backstage/config';\n\n/**\n * The Config API is used to provide a mechanism to access the\n * runtime configuration of the system.\n */\nexport type ConfigApi = Config;\n\nexport const configApiRef: ApiRef<ConfigApi> = createApiRef({\n  id: 'core.config',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * The discovery API is used to provide a mechanism for plugins to\n * discover the endpoint to use to talk to their backend counterpart.\n *\n * The purpose of the discovery API is to allow for many different deployment\n * setups and routing methods through a central configuration, instead\n * of letting each individual plugin manage that configuration.\n *\n * Implementations of the discovery API can be a simple as a URL pattern\n * using the pluginId, but could also have overrides for individual plugins,\n * or query a separate discovery service.\n */\nexport type DiscoveryApi = {\n  /**\n   * Returns the HTTP base backend URL for a given plugin, without a trailing slash.\n   *\n   * This method must always be called just before making a request, as opposed to\n   * fetching the URL when constructing an API client. That is to ensure that more\n   * flexible routing patterns can be supported.\n   *\n   * For example, asking for the URL for `auth` may return something\n   * like `https://backstage.example.com/api/auth`\n   */\n  getBaseUrl(pluginId: string): Promise<string>;\n};\n\nexport const discoveryApiRef: ApiRef<DiscoveryApi> = createApiRef({\n  id: 'core.discovery',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '../../types';\n\n/**\n * Mirrors the JavaScript Error class, for the purpose of\n * providing documentation and optional fields.\n */\ntype Error = {\n  name: string;\n  message: string;\n  stack?: string;\n};\n\n/**\n * Provides additional information about an error that was posted to the application.\n */\nexport type ErrorContext = {\n  // If set to true, this error should not be displayed to the user. Defaults to false.\n  hidden?: boolean;\n};\n\n/**\n * The error API is used to report errors to the app, and display them to the user.\n *\n * Plugins can use this API as a method of displaying errors to the user, but also\n * to report errors for collection by error reporting services.\n *\n * If an error can be displayed inline, e.g. as feedback in a form, that should be\n * preferred over relying on this API to display the error. The main use of this API\n * for displaying errors should be for asynchronous errors, such as a failing background process.\n *\n * Even if an error is displayed inline, it should still be reported through this API\n * if it would be useful to collect or log it for debugging purposes, but with\n * the hidden flag set. For example, an error arising from form field validation\n * should probably not be reported, while a failed REST call would be useful to report.\n */\nexport type ErrorApi = {\n  /**\n   * Post an error for handling by the application.\n   */\n  post(error: Error, context?: ErrorContext): void;\n\n  /**\n   * Observe errors posted by other parts of the application.\n   */\n  error$(): Observable<{ error: Error; context?: ErrorContext }>;\n};\n\nexport const errorApiRef: ApiRef<ErrorApi> = createApiRef({\n  id: 'core.error',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * The feature flags API is used to toggle functionality to users across plugins and Backstage.\n *\n * Plugins can use this API to register feature flags that they have available\n * for users to enable/disable, and this API will centralize the current user's\n * state of which feature flags they would like to enable.\n *\n * This is ideal for Backstage plugins, as well as your own App, to trial incomplete\n * or unstable upcoming features. Although there will be a common interface for users\n * to enable and disable feature flags, this API acts as another way to enable/disable.\n */\n\nexport type FeatureFlag = {\n  name: string;\n  pluginId: string;\n};\n\nexport enum FeatureFlagState {\n  None = 0,\n  Active = 1,\n}\n\n/**\n * Options to use when saving feature flags.\n */\nexport type FeatureFlagsSaveOptions = {\n  /**\n   * The new feature flag states to save.\n   */\n  states: Record<string, FeatureFlagState>;\n\n  /**\n   * Whether the saves states should be merged into the existing ones, or replace them.\n   *\n   * Defaults to false.\n   */\n  merge?: boolean;\n};\n\nexport type UserFlags = {};\n\nexport interface FeatureFlagsApi {\n  /**\n   * Registers a new feature flag. Once a feature flag has been registered it\n   * can be toggled by users, and read back to enable or disable features.\n   */\n  registerFlag(flag: FeatureFlag): void;\n\n  /**\n   * Get a list of all registered flags.\n   */\n  getRegisteredFlags(): FeatureFlag[];\n\n  /**\n   * Whether the feature flag with the given name is currently activated for the user.\n   */\n  isActive(name: string): boolean;\n\n  /**\n   * Save the user's choice of feature flag states.\n   */\n  save(options: FeatureFlagsSaveOptions): void;\n}\n\nexport const featureFlagsApiRef: ApiRef<FeatureFlagsApi> = createApiRef({\n  id: 'core.featureflags',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\nimport { ProfileInfo } from './auth';\n\n/**\n * The Identity API used to identify and get information about the signed in user.\n */\nexport type IdentityApi = {\n  /**\n   * The ID of the signed in user. This ID is not meant to be presented to the user, but used\n   * as an opaque string to pass on to backends or use in frontend logic.\n   *\n   * TODO: The intention of the user ID is to be able to tie the user to an identity\n   *       that is known by the catalog and/or identity backend. It should for example\n   *       be possible to fetch all owned components using this ID.\n   */\n  getUserId(): string;\n\n  /**\n   * The profile of the signed in user.\n   */\n  getProfile(): ProfileInfo;\n\n  /**\n   * An OpenID Connect ID Token which proves the identity of the signed in user.\n   *\n   * The ID token will be undefined if the signed in user does not have a verified\n   * identity, such as a demo user or mocked user for e2e tests.\n   */\n  getIdToken(): Promise<string | undefined>;\n\n  /**\n   * Sign out the current user\n   */\n  signOut(): Promise<void>;\n};\n\nexport const identityApiRef: ApiRef<IdentityApi> = createApiRef({\n  id: 'core.identity',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IconComponent } from '../../icons/types';\nimport { Observable } from '../../types';\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * Information about the auth provider that we're requesting a login towards.\n *\n * This should be shown to the user so that they can be informed about what login is being requested\n * before a popup is shown.\n */\nexport type AuthProvider = {\n  /**\n   * Title for the auth provider, for example \"GitHub\"\n   */\n  title: string;\n\n  /**\n   * Icon for the auth provider.\n   */\n  icon: IconComponent;\n};\n\n/**\n * Describes how to handle auth requests. Both how to show them to the user, and what to do when\n * the user accesses the auth request.\n */\nexport type AuthRequesterOptions<AuthResponse> = {\n  /**\n   * Information about the auth provider, which will be forwarded to auth requests.\n   */\n  provider: AuthProvider;\n\n  /**\n   * Implementation of the auth flow, which will be called synchronously when\n   * trigger() is called on an auth requests.\n   */\n  onAuthRequest(scopes: Set<string>): Promise<AuthResponse>;\n};\n\n/**\n * Function used to trigger new auth requests for a set of scopes.\n *\n * The returned promise will resolve to the same value returned by the onAuthRequest in the\n * AuthRequesterOptions. Or rejected, if the request is rejected.\n *\n * This function can be called multiple times before the promise resolves. All calls\n * will be merged into one request, and the scopes forwarded to the onAuthRequest will be the\n * union of all requested scopes.\n */\nexport type AuthRequester<AuthResponse> = (\n  scopes: Set<string>,\n) => Promise<AuthResponse>;\n\n/**\n * An pending auth request for a single auth provider. The request will remain in this pending\n * state until either reject() or trigger() is called.\n *\n * Any new requests for the same provider are merged into the existing pending request, meaning\n * there will only ever be a single pending request for a given provider.\n */\nexport type PendingAuthRequest = {\n  /**\n   * Information about the auth provider, as given in the AuthRequesterOptions\n   */\n  provider: AuthProvider;\n\n  /**\n   * Rejects the request, causing all pending AuthRequester calls to fail with \"RejectedError\".\n   */\n  reject: () => void;\n\n  /**\n   * Trigger the auth request to continue the auth flow, by for example showing a popup.\n   *\n   * Synchronously calls onAuthRequest with all scope currently in the request.\n   */\n  trigger(): Promise<void>;\n};\n\n/**\n * Provides helpers for implemented OAuth login flows within Backstage.\n */\nexport type OAuthRequestApi = {\n  /**\n   * A utility for showing login popups or similar things, and merging together multiple requests for\n   * different scopes into one request that includes all scopes.\n   *\n   * The passed in options provide information about the login provider, and how to handle auth requests.\n   *\n   * The returned AuthRequester function is used to request login with new scopes. These requests\n   * are merged together and forwarded to the auth handler, as soon as a consumer of auth requests\n   * triggers an auth flow.\n   *\n   * See AuthRequesterOptions, AuthRequester, and handleAuthRequests for more info.\n   */\n  createAuthRequester<AuthResponse>(\n    options: AuthRequesterOptions<AuthResponse>,\n  ): AuthRequester<AuthResponse>;\n\n  /**\n   * Observers pending auth requests. The returned observable will emit all\n   * current active auth request, at most one for each created auth requester.\n   *\n   * Each request has its own info about the login provider, forwarded from the auth requester options.\n   *\n   * Depending on user interaction, the request should either be rejected, or used to trigger the auth handler.\n   * If the request is rejected, all pending AuthRequester calls will fail with a \"RejectedError\".\n   * If a auth is triggered, and the auth handler resolves successfully, then all currently pending\n   * AuthRequester calls will resolve to the value returned by the onAuthRequest call.\n   */\n  authRequest$(): Observable<PendingAuthRequest[]>;\n};\n\nexport const oauthRequestApiRef: ApiRef<OAuthRequestApi> = createApiRef({\n  id: 'core.oauthrequest',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '../../types';\n\nexport type StorageValueChange<T = any> = {\n  key: string;\n  newValue?: T;\n};\n\nexport interface StorageApi {\n  /**\n   * Create a bucket to store data in.\n   * @param {String} name Namespace for the storage to be stored under,\n   *                      will inherit previous namespaces too\n   */\n  forBucket(name: string): StorageApi;\n\n  /**\n   * Get the current value for persistent data, use observe$ to be notified of updates.\n   *\n   * @param {String} key Unique key associated with the data.\n   * @return {Object} data The data that should is stored.\n   */\n  get<T>(key: string): T | undefined;\n\n  /**\n   * Remove persistent data.\n   *\n   * @param {String} key Unique key associated with the data.\n   */\n  remove(key: string): Promise<void>;\n\n  /**\n   * Save persistent data, and emit messages to anyone that is using observe$ for this key\n   *\n   * @param {String} key Unique key associated with the data.\n   */\n  set(key: string, data: any): Promise<void>;\n\n  /**\n   * Observe changes on a particular key in the bucket\n   * @param {String} key Unique key associated with the data\n   */\n  observe$<T>(key: string): Observable<StorageValueChange<T>>;\n}\n\nexport const storageApiRef: ApiRef<StorageApi> = createApiRef({\n  id: 'core.storage',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useVersionedContext } from '../lib/versionedValues';\nimport { AppContext as AppContextV1 } from './types';\n\nexport const useApp = (): AppContextV1 => {\n  const versionedContext =\n    useVersionedContext<{ 1: AppContextV1 }>('app-context');\n  const appContext = versionedContext.atVersion(1);\n  if (!appContext) {\n    throw new Error('AppContext v1 not available');\n  }\n  return appContext;\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentType, ReactNode } from 'react';\nimport { getOrCreateGlobalSingleton } from '../lib/globalObject';\n\ntype DataContainer = {\n  map: Map<string, unknown>;\n};\n\ntype MaybeComponentNode = ReactNode & {\n  type?: ComponentType<any>;\n};\n\n// The store is bridged across versions using the global object\nconst globalStore = getOrCreateGlobalSingleton(\n  'component-data-store',\n  () => new WeakMap<ComponentType<any>, DataContainer>(),\n);\n\nexport function attachComponentData<P>(\n  component: ComponentType<P>,\n  type: string,\n  data: unknown,\n) {\n  let container = globalStore.get(component);\n  if (!container) {\n    container = { map: new Map() };\n    globalStore.set(component, container);\n  }\n\n  if (container.map.has(type)) {\n    const name = component.displayName || component.name;\n    throw new Error(\n      `Attempted to attach duplicate data \"${type}\" to component \"${name}\"`,\n    );\n  }\n\n  container.map.set(type, data);\n}\n\nexport function getComponentData<T>(\n  node: ReactNode,\n  type: string,\n): T | undefined {\n  if (!node) {\n    return undefined;\n  }\n\n  const component = (node as MaybeComponentNode).type;\n  if (!component) {\n    return undefined;\n  }\n\n  const container = globalStore.get(component);\n  if (!container) {\n    return undefined;\n  }\n\n  return container.map.get(type) as T | undefined;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OldIconComponent } from '../icons/types';\nimport { getOrCreateGlobalSingleton } from '../lib/globalObject';\n\nexport type AnyParams = { [param in string]: string } | undefined;\nexport type ParamKeys<Params extends AnyParams> = keyof Params extends never\n  ? []\n  : (keyof Params)[];\nexport type OptionalParams<Params extends { [param in string]: string }> =\n  Params[keyof Params] extends never ? undefined : Params;\n\n// The extra TS magic here is to require a single params argument if the RouteRef\n// had at least one param defined, but require 0 arguments if there are no params defined.\n// Without this we'd have to pass in empty object to all parameter-less RouteRefs\n// just to make TypeScript happy, or we would have to make the argument optional in\n// which case you might forget to pass it in when it is actually required.\nexport type RouteFunc<Params extends AnyParams> = (\n  ...[params]: Params extends undefined ? readonly [] : readonly [Params]\n) => string;\n\nexport const routeRefType: unique symbol = getOrCreateGlobalSingleton<any>(\n  'route-ref-type',\n  () => Symbol('route-ref-type'),\n);\n\nexport type RouteRef<Params extends AnyParams = any> = {\n  readonly [routeRefType]: 'absolute';\n\n  params: ParamKeys<Params>;\n\n  // TODO(Rugvip): Remove all of these once plugins don't rely on the path\n  /** @deprecated paths are no longer accessed directly from RouteRefs, use useRouteRef instead */\n  path: string;\n  /** @deprecated icons are no longer accessed via RouteRefs */\n  icon?: OldIconComponent;\n  /** @deprecated titles are no longer accessed via RouteRefs */\n  title?: string;\n};\n\nexport type SubRouteRef<Params extends AnyParams = any> = {\n  readonly [routeRefType]: 'sub';\n\n  parent: RouteRef;\n\n  path: string;\n\n  params: ParamKeys<Params>;\n};\n\nexport type ExternalRouteRef<\n  Params extends AnyParams = any,\n  Optional extends boolean = any,\n> = {\n  readonly [routeRefType]: 'external';\n\n  params: ParamKeys<Params>;\n\n  optional?: Optional;\n};\n\nexport type AnyRouteRef =\n  | RouteRef<any>\n  | SubRouteRef<any>\n  | ExternalRouteRef<any, any>;\n\n// TODO(Rugvip): None of these should be found in the wild anymore, remove in next minor release\n/** @deprecated */\nexport type ConcreteRoute = {};\n/** @deprecated */\nexport type AbsoluteRouteRef = RouteRef<{}>;\n/** @deprecated */\nexport type MutableRouteRef = RouteRef<{}>;\n\n// A duplicate of the react-router RouteObject, but with routeRef added\nexport interface BackstageRouteObject {\n  caseSensitive: boolean;\n  children?: BackstageRouteObject[];\n  element: React.ReactNode;\n  path: string;\n  routeRefs: Set<RouteRef>;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RouteRef,\n  routeRefType,\n  AnyParams,\n  ParamKeys,\n  OptionalParams,\n} from './types';\nimport { OldIconComponent } from '../icons/types';\n\n// TODO(Rugvip): Remove this in the next breaking release, it's exported but unused\nexport type RouteRefConfig<Params extends AnyParams> = {\n  params?: ParamKeys<Params>;\n  path?: string;\n  icon?: OldIconComponent;\n  title: string;\n};\n\nexport class RouteRefImpl<Params extends AnyParams>\n  implements RouteRef<Params>\n{\n  readonly [routeRefType] = 'absolute';\n\n  constructor(\n    private readonly id: string,\n    readonly params: ParamKeys<Params>,\n    private readonly config: {\n      path?: string;\n      icon?: OldIconComponent;\n      title?: string;\n    },\n  ) {}\n\n  get icon() {\n    return this.config.icon;\n  }\n\n  // TODO(Rugvip): Remove this, routes are looked up via the registry instead\n  get path() {\n    return this.config.path ?? '';\n  }\n\n  get title() {\n    return this.config.title ?? this.id;\n  }\n\n  toString() {\n    return `routeRef{type=absolute,id=${this.id}}`;\n  }\n}\n\nexport function createRouteRef<\n  // Params is the type that we care about and the one to be embedded in the route ref.\n  // For example, given the params ['name', 'kind'], Params will be {name: string, kind: string}\n  Params extends { [param in ParamKey]: string },\n  // ParamKey is here to make sure the Params type properly has its keys narrowed down\n  // to only the elements of params. Defaulting to never makes sure we end up with\n  // Param = {} if the params array is empty.\n  ParamKey extends string = never,\n>(config: {\n  /** The id of the route ref, used to identify it when printed */\n  id?: string;\n  /** A list of parameter names that the path that this route ref is bound to must contain */\n  params?: ParamKey[];\n  /** @deprecated Route refs no longer decide their own path */\n  path?: string;\n  /** @deprecated Route refs no longer decide their own icon */\n  icon?: OldIconComponent;\n  /** @deprecated Route refs no longer decide their own title */\n  title?: string;\n}): RouteRef<OptionalParams<Params>> {\n  const id = config.id || config.title;\n  if (!id) {\n    throw new Error('RouteRef must be provided a non-empty id');\n  }\n  return new RouteRefImpl(\n    id,\n    (config.params ?? []) as ParamKeys<OptionalParams<Params>>,\n    config,\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnyParams,\n  OptionalParams,\n  ParamKeys,\n  RouteRef,\n  routeRefType,\n  SubRouteRef,\n} from './types';\n\n// Should match the pattern in react-router\nconst PARAM_PATTERN = /^\\w+$/;\n\nexport class SubRouteRefImpl<Params extends AnyParams>\n  implements SubRouteRef<Params>\n{\n  readonly [routeRefType] = 'sub';\n\n  constructor(\n    private readonly id: string,\n    readonly path: string,\n    readonly parent: RouteRef,\n    readonly params: ParamKeys<Params>,\n  ) {}\n\n  toString() {\n    return `routeRef{type=sub,id=${this.id}}`;\n  }\n}\n\n// These utility types help us infer a Param object type from a string path\n// For example, `/foo/:bar/:baz` inferred to `{ bar: string, baz: string }`\ntype ParamPart<S extends string> = S extends `:${infer Param}` ? Param : never;\ntype ParamNames<S extends string> = S extends `${infer Part}/${infer Rest}`\n  ? ParamPart<Part> | ParamNames<Rest>\n  : ParamPart<S>;\ntype PathParams<S extends string> = { [name in ParamNames<S>]: string };\n\n/**\n * Merges a param object type with with an optional params type into a params object\n */\ntype MergeParams<\n  P1 extends { [param in string]: string },\n  P2 extends AnyParams,\n> = (P1[keyof P1] extends never ? {} : P1) & (P2 extends undefined ? {} : P2);\n\n/**\n * Creates a SubRouteRef type given the desired parameters and parent route parameters.\n * The parameters types are merged together while ensuring that there is no overlap between the two.\n */\ntype MakeSubRouteRef<\n  Params extends { [param in string]: string },\n  ParentParams extends AnyParams,\n> = keyof Params & keyof ParentParams extends never\n  ? SubRouteRef<OptionalParams<MergeParams<Params, ParentParams>>>\n  : never;\n\nexport function createSubRouteRef<\n  Path extends string,\n  ParentParams extends AnyParams = never,\n>(config: {\n  id: string;\n  path: Path;\n  parent: RouteRef<ParentParams>;\n}): MakeSubRouteRef<PathParams<Path>, ParentParams> {\n  const { id, path, parent } = config;\n  type Params = PathParams<Path>;\n\n  // Collect runtime parameters from the path, e.g. ['bar', 'baz'] from '/foo/:bar/:baz'\n  const pathParams = path\n    .split('/')\n    .filter(p => p.startsWith(':'))\n    .map(p => p.substring(1));\n  const params = [...parent.params, ...pathParams];\n\n  if (parent.params.some(p => pathParams.includes(p as string))) {\n    throw new Error(\n      'SubRouteRef may not have params that overlap with its parent',\n    );\n  }\n  if (!path.startsWith('/')) {\n    throw new Error(`SubRouteRef path must start with '/', got '${path}'`);\n  }\n  if (path.endsWith('/')) {\n    throw new Error(`SubRouteRef path must not end with '/', got '${path}'`);\n  }\n  for (const param of pathParams) {\n    if (!PARAM_PATTERN.test(param)) {\n      throw new Error(`SubRouteRef path has invalid param, got '${param}'`);\n    }\n  }\n\n  // We ensure that the type of the return type is sane here\n  const subRouteRef = new SubRouteRefImpl(\n    id,\n    path,\n    parent,\n    params as ParamKeys<MergeParams<Params, ParentParams>>,\n  ) as SubRouteRef<OptionalParams<MergeParams<Params, ParentParams>>>;\n\n  // But skip type checking of the return value itself, because the conditional\n  // type checking of the parent parameter overlap is tricky to express.\n  return subRouteRef as any;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExternalRouteRef,\n  routeRefType,\n  AnyParams,\n  ParamKeys,\n  OptionalParams,\n} from './types';\n\nexport class ExternalRouteRefImpl<\n  Params extends AnyParams,\n  Optional extends boolean,\n> implements ExternalRouteRef<Params, Optional>\n{\n  readonly [routeRefType] = 'external';\n\n  constructor(\n    private readonly id: string,\n    readonly params: ParamKeys<Params>,\n    readonly optional: Optional,\n  ) {}\n\n  toString() {\n    return `routeRef{type=external,id=${this.id}}`;\n  }\n}\n\nexport function createExternalRouteRef<\n  Params extends { [param in ParamKey]: string },\n  Optional extends boolean = false,\n  ParamKey extends string = never,\n>(options: {\n  /**\n   * An identifier for this route, used to identify it in error messages\n   */\n  id: string;\n\n  /**\n   * The parameters that will be provided to the external route reference.\n   */\n  params?: ParamKey[];\n\n  /**\n   * Whether or not this route is optional, defaults to false.\n   *\n   * Optional external routes are not required to be bound in the app, and\n   * if they aren't, `useRouteRef` will return `undefined`.\n   */\n  optional?: Optional;\n}): ExternalRouteRef<OptionalParams<Params>, Optional> {\n  return new ExternalRouteRefImpl(\n    options.id,\n    (options.params ?? []) as ParamKeys<OptionalParams<Params>>,\n    Boolean(options.optional) as Optional,\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useMemo } from 'react';\nimport { matchRoutes, useLocation } from 'react-router-dom';\nimport { useVersionedContext } from '../lib/versionedValues';\nimport {\n  AnyParams,\n  ExternalRouteRef,\n  RouteFunc,\n  RouteRef,\n  SubRouteRef,\n} from './types';\n\nexport interface RouteResolver {\n  resolve<Params extends AnyParams>(\n    anyRouteRef:\n      | RouteRef<Params>\n      | SubRouteRef<Params>\n      | ExternalRouteRef<Params, any>,\n    sourceLocation: Parameters<typeof matchRoutes>[1],\n  ): RouteFunc<Params> | undefined;\n}\n\nexport function useRouteRef<Optional extends boolean, Params extends AnyParams>(\n  routeRef: ExternalRouteRef<Params, Optional>,\n): Optional extends true ? RouteFunc<Params> | undefined : RouteFunc<Params>;\nexport function useRouteRef<Params extends AnyParams>(\n  routeRef: RouteRef<Params> | SubRouteRef<Params>,\n): RouteFunc<Params>;\nexport function useRouteRef<Params extends AnyParams>(\n  routeRef:\n    | RouteRef<Params>\n    | SubRouteRef<Params>\n    | ExternalRouteRef<Params, any>,\n): RouteFunc<Params> | undefined {\n  const sourceLocation = useLocation();\n  const versionedContext =\n    useVersionedContext<{ 1: RouteResolver }>('routing-context');\n  const resolver = versionedContext.atVersion(1);\n  const routeFunc = useMemo(\n    () => resolver && resolver.resolve(routeRef, sourceLocation),\n    [resolver, routeRef, sourceLocation],\n  );\n\n  if (!versionedContext) {\n    throw new Error('useRouteRef used outside of routing context');\n  }\n  if (!resolver) {\n    throw new Error('RoutingContext v1 not available');\n  }\n\n  const isOptional = 'optional' in routeRef && routeRef.optional;\n  if (!routeFunc && !isOptional) {\n    throw new Error(`No path for ${routeRef}`);\n  }\n\n  return routeFunc;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useParams } from 'react-router-dom';\nimport { RouteRef, AnyParams, SubRouteRef } from './types';\n\nexport function useRouteRefParams<Params extends AnyParams>(\n  _routeRef: RouteRef<Params> | SubRouteRef<Params>,\n): Params {\n  return useParams() as Params;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport { AppContext } from '../app/types';\nimport { BackstagePlugin } from '../plugin';\n\ntype Props = {\n  app: AppContext;\n  plugin: BackstagePlugin;\n};\n\ntype State = { error: Error | undefined };\n\nexport class PluginErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error: Error) {\n    return { error };\n  }\n\n  state: State = { error: undefined };\n\n  handleErrorReset = () => {\n    this.setState({ error: undefined });\n  };\n\n  render() {\n    const { error } = this.state;\n    const { app, plugin } = this.props;\n    const { ErrorBoundaryFallback } = app.getComponents();\n\n    if (error) {\n      return (\n        <ErrorBoundaryFallback\n          error={error}\n          resetError={this.handleErrorReset}\n          plugin={plugin}\n        />\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { lazy, Suspense } from 'react';\nimport { useApp } from '../app';\nimport { RouteRef, useRouteRef } from '../routing';\nimport { attachComponentData } from './componentData';\nimport { Extension, BackstagePlugin } from '../plugin/types';\nimport { PluginErrorBoundary } from './PluginErrorBoundary';\n\ntype ComponentLoader<T> =\n  | {\n      lazy: () => Promise<T>;\n    }\n  | {\n      sync: T;\n    };\n\n// We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n// ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n// making it impossible to make the usage of children type safe.\nexport function createRoutableExtension<\n  T extends (props: any) => JSX.Element | null,\n>(options: {\n  component: () => Promise<T>;\n  mountPoint: RouteRef;\n}): Extension<T> {\n  const { component, mountPoint } = options;\n  return createReactExtension({\n    component: {\n      lazy: () =>\n        component().then(\n          InnerComponent => {\n            const RoutableExtensionWrapper: any = (props: any) => {\n              // Validate that the routing is wired up correctly in the App.tsx\n              try {\n                useRouteRef(mountPoint);\n              } catch (error) {\n                if (error?.message.startsWith('No path for ')) {\n                  throw new Error(\n                    `Routable extension component with mount point ${mountPoint} was not discovered in the app element tree. ` +\n                      'Routable extension components may not be rendered by other components and must be ' +\n                      'directly available as an element within the App provider component.',\n                  );\n                }\n                throw error;\n              }\n              return <InnerComponent {...props} />;\n            };\n\n            const componentName =\n              (InnerComponent as { displayName?: string }).displayName ||\n              InnerComponent.name ||\n              'LazyComponent';\n\n            RoutableExtensionWrapper.displayName = `RoutableExtension(${componentName})`;\n\n            return RoutableExtensionWrapper as T;\n          },\n          error => {\n            const RoutableExtensionWrapper: any = (_: any) => {\n              const app = useApp();\n              const { BootErrorPage } = app.getComponents();\n\n              return <BootErrorPage step=\"load-chunk\" error={error} />;\n            };\n            return RoutableExtensionWrapper;\n          },\n        ),\n    },\n    data: {\n      'core.mountPoint': mountPoint,\n    },\n  });\n}\n\n// We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n// ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n// making it impossible to make the usage of children type safe.\nexport function createComponentExtension<\n  T extends (props: any) => JSX.Element | null,\n>(options: { component: ComponentLoader<T> }): Extension<T> {\n  const { component } = options;\n  return createReactExtension({ component });\n}\n\n// We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n// ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n// making it impossible to make the usage of children type safe.\nexport function createReactExtension<\n  T extends (props: any) => JSX.Element | null,\n>(options: {\n  component: ComponentLoader<T>;\n  data?: Record<string, unknown>;\n}): Extension<T> {\n  const { data = {} } = options;\n\n  let Component: T;\n  if ('lazy' in options.component) {\n    const lazyLoader = options.component.lazy;\n    Component = lazy(() =>\n      lazyLoader().then(component => ({ default: component })),\n    ) as unknown as T;\n  } else {\n    Component = options.component.sync;\n  }\n  const componentName =\n    (Component as { displayName?: string }).displayName ||\n    Component.name ||\n    'Component';\n\n  return {\n    expose(plugin: BackstagePlugin<any, any>) {\n      const Result: any = (props: any) => {\n        const app = useApp();\n        const { Progress } = app.getComponents();\n\n        return (\n          <Suspense fallback={<Progress />}>\n            <PluginErrorBoundary app={app} plugin={plugin}>\n              <Component {...props} />\n            </PluginErrorBoundary>\n          </Suspense>\n        );\n      };\n\n      attachComponentData(Result, 'core.plugin', plugin);\n      for (const [key, value] of Object.entries(data)) {\n        attachComponentData(Result, key, value);\n      }\n\n      Result.displayName = `Extension(${componentName})`;\n      return Result;\n    },\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Children,\n  Fragment,\n  isValidElement,\n  ReactNode,\n  ReactElement,\n  useMemo,\n} from 'react';\nimport { getComponentData } from './componentData';\nimport { useApi, FeatureFlagsApi, featureFlagsApiRef } from '../apis';\n\nfunction selectChildren(\n  rootNode: ReactNode,\n  featureFlagsApi: FeatureFlagsApi,\n  selector?: (element: ReactElement<unknown>) => boolean,\n  strictError?: string,\n): Array<ReactElement<unknown>> {\n  return Children.toArray(rootNode).flatMap(node => {\n    if (!isValidElement(node)) {\n      return [];\n    }\n\n    if (node.type === Fragment) {\n      return selectChildren(\n        node.props.children,\n        featureFlagsApi,\n        selector,\n        strictError,\n      );\n    }\n\n    if (getComponentData(node, 'core.featureFlagged')) {\n      const props = node.props as { with: string } | { without: string };\n      const isEnabled =\n        'with' in props\n          ? featureFlagsApi.isActive(props.with)\n          : !featureFlagsApi.isActive(props.without);\n      if (isEnabled) {\n        return selectChildren(\n          node.props.children,\n          featureFlagsApi,\n          selector,\n          strictError,\n        );\n      }\n      return [];\n    }\n\n    if (selector === undefined || selector(node)) {\n      return [node];\n    }\n\n    if (strictError) {\n      throw new Error(strictError);\n    }\n\n    return selectChildren(\n      node.props.children,\n      featureFlagsApi,\n      selector,\n      strictError,\n    );\n  });\n}\n\n/**\n * A querying interface tailored to traversing a set of selected React elements\n * and extracting data.\n *\n * Methods prefixed with `selectBy` are used to narrow the set of selected elements.\n *\n * Methods prefixed with `find` return concrete data using a deep traversal of the set.\n *\n * Methods prefixed with `get` return concrete data using a shallow traversal of the set.\n */\nexport interface ElementCollection {\n  /**\n   * Narrows the set of selected components by doing a deep traversal and\n   * only including those that have defined component data for the given `key`.\n   *\n   * Whether an element in the tree has component data set for the given key\n   * is determined by whether `getComponentData` returns undefined.\n   *\n   * The traversal does not continue deeper past elements that match the criteria,\n   * and it also includes the root children in the selection, meaning that if the,\n   * of all the currently selected elements contain data for the given key, this\n   * method is a no-op.\n   *\n   * If `withStrictError` is set, the resulting selection must be a full match, meaning\n   * there may be no elements that were excluded in the selection. If the selection\n   * is not a clean match, an error will be throw with `withStrictError` as the message.\n   */\n  selectByComponentData(query: {\n    key: string;\n    withStrictError?: string;\n  }): ElementCollection;\n\n  /**\n   * Finds all elements using the same criteria as `selectByComponentData`, but\n   * returns the actual component data of each of those elements instead.\n   */\n  findComponentData<T>(query: { key: string }): T[];\n\n  /**\n   * Returns all of the elements currently selected by this collection.\n   */\n  getElements<Props extends { [name: string]: unknown }>(): Array<\n    ReactElement<Props>\n  >;\n}\n\nclass Collection implements ElementCollection {\n  constructor(\n    private readonly node: ReactNode,\n    private readonly featureFlagsApi: FeatureFlagsApi,\n  ) {}\n\n  selectByComponentData(query: { key: string; withStrictError?: string }) {\n    const selection = selectChildren(\n      this.node,\n      this.featureFlagsApi,\n      node => getComponentData(node, query.key) !== undefined,\n      query.withStrictError,\n    );\n    return new Collection(selection, this.featureFlagsApi);\n  }\n\n  findComponentData<T>(query: { key: string }): T[] {\n    const selection = selectChildren(\n      this.node,\n      this.featureFlagsApi,\n      node => getComponentData(node, query.key) !== undefined,\n    );\n    return selection\n      .map(node => getComponentData<T>(node, query.key))\n      .filter((data: T | undefined): data is T => data !== undefined);\n  }\n\n  getElements<Props extends { [name: string]: unknown }>(): Array<\n    ReactElement<Props>\n  > {\n    return selectChildren(this.node, this.featureFlagsApi) as Array<\n      ReactElement<Props>\n    >;\n  }\n}\n\n/**\n * useElementFilter is a utility that helps you narrow down and retrieve data\n * from a React element tree, typically operating on the `children` property\n * passed in to a component. A common use-case is to construct declarative APIs\n * where a React component defines its behavior based on its children, such as\n * the relationship between `Routes` and `Route` in `react-router`.\n *\n * The purpose of this hook is similar to `React.Children.map`, and it expands upon\n * it to also handle traversal of fragments and Backstage specific things like the\n * `FeatureFlagged` component.\n *\n * The return value of the hook is computed by the provided filter function, but\n * with added memoization based on the input `node`. If further memoization\n * dependencies are used in the filter function, they should be added to the\n * third `dependencies` argument, just like `useMemo`, `useEffect`, etc.\n */\nexport function useElementFilter<T>(\n  node: ReactNode,\n  filterFn: (arg: ElementCollection) => T,\n  dependencies: any[] = [],\n) {\n  const featureFlagsApi = useApi(featureFlagsApiRef);\n  const elements = new Collection(node, featureFlagsApi);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => filterFn(elements), [node, ...dependencies]);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginConfig,\n  PluginOutput,\n  BackstagePlugin,\n  Extension,\n  AnyRoutes,\n  AnyExternalRoutes,\n} from './types';\nimport { AnyApiFactory } from '../apis';\n\nexport class PluginImpl<\n  Routes extends AnyRoutes,\n  ExternalRoutes extends AnyExternalRoutes,\n> implements BackstagePlugin<Routes, ExternalRoutes>\n{\n  private storedOutput?: PluginOutput[];\n\n  constructor(private readonly config: PluginConfig<Routes, ExternalRoutes>) {}\n\n  getId(): string {\n    return this.config.id;\n  }\n\n  getApis(): Iterable<AnyApiFactory> {\n    return this.config.apis ?? [];\n  }\n\n  get routes(): Routes {\n    return this.config.routes ?? ({} as Routes);\n  }\n\n  get externalRoutes(): ExternalRoutes {\n    return this.config.externalRoutes ?? ({} as ExternalRoutes);\n  }\n\n  output(): PluginOutput[] {\n    if (this.storedOutput) {\n      return this.storedOutput;\n    }\n    if (!this.config.register) {\n      return [];\n    }\n\n    const outputs = new Array<PluginOutput>();\n\n    this.config.register({\n      featureFlags: {\n        register(name) {\n          outputs.push({ type: 'feature-flag', name });\n        },\n      },\n    });\n\n    this.storedOutput = outputs;\n    return this.storedOutput;\n  }\n\n  provide<T>(extension: Extension<T>): T {\n    return extension.expose(this);\n  }\n\n  toString() {\n    return `plugin{${this.config.id}}`;\n  }\n}\n\nexport function createPlugin<\n  Routes extends AnyRoutes = {},\n  ExternalRoutes extends AnyExternalRoutes = {},\n>(\n  config: PluginConfig<Routes, ExternalRoutes>,\n): BackstagePlugin<Routes, ExternalRoutes> {\n  return new PluginImpl(config);\n}\n"],"names":["_a"],"mappings":"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"}