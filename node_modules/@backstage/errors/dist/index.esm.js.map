{"version":3,"file":"index.esm.js","sources":["../src/errors/CustomErrorBase.ts","../src/errors/common.ts","../src/serialization/error.ts","../src/serialization/response.ts","../src/errors/ResponseError.ts"],"sourcesContent":["/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class CustomErrorBase extends Error {\n  readonly cause?: Error;\n\n  constructor(message?: string, cause?: Error) {\n    let fullMessage = message;\n    if (cause) {\n      if (fullMessage) {\n        fullMessage += `; caused by ${cause}`;\n      } else {\n        fullMessage = `caused by ${cause}`;\n      }\n    }\n\n    super(fullMessage);\n\n    Error.captureStackTrace?.(this, this.constructor);\n\n    this.name = this.constructor.name;\n    this.cause = cause;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CustomErrorBase } from './CustomErrorBase';\n\n/*\n * A set of common business logic errors.\n *\n * A backend error handler middleware would understand these and translate them\n * to well formed HTTP responses.\n *\n * While these are intentionally analogous to HTTP errors, they are not\n * intended to be thrown by the request handling layer. In those places, please\n * use e.g. the http-errors library.\n */\n\n/**\n * The given inputs are malformed and cannot be processed.\n */\nexport class InputError extends CustomErrorBase {}\n\n/**\n * The request requires authentication, which was not properly supplied.\n */\nexport class AuthenticationError extends CustomErrorBase {}\n\n/**\n * The authenticated caller is not allowed to perform this request.\n */\nexport class NotAllowedError extends CustomErrorBase {}\n\n/**\n * The requested resource could not be found.\n *\n * Note that this error usually is used to indicate that an entity with a given\n * ID does not exist, rather than signalling that an entire route is missing.\n */\nexport class NotFoundError extends CustomErrorBase {}\n\n/**\n * The request could not complete due to a conflict in the current state of the\n * resource.\n */\nexport class ConflictError extends CustomErrorBase {}\n\n/**\n * The requested resource has not changed since last request.\n */\nexport class NotModifiedError extends CustomErrorBase {}\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/config';\nimport {\n  deserializeError as deserializeErrorInternal,\n  serializeError as serializeErrorInternal,\n} from 'serialize-error';\n\n/**\n * The serialized form of an Error.\n */\nexport type SerializedError = JsonObject & {\n  /** The name of the exception that was thrown */\n  name: string;\n  /** The message of the exception that was thrown */\n  message: string;\n  /** A stringified stack trace; may not be present */\n  stack?: string;\n  /** A custom code (not necessarily the same as an HTTP response code); may not be present */\n  code?: string;\n};\n\n/**\n * Serializes an error object to a JSON friendly form.\n *\n * @param error The error\n * @param options.includeStackTraces: Include stack trace in the output (default false)\n */\nexport function serializeError(\n  error: Error,\n  options?: { includeStack?: boolean },\n): SerializedError {\n  const serialized = serializeErrorInternal(error);\n  const result: SerializedError = {\n    name: 'Unknown',\n    message: '<no reason given>',\n    ...serialized,\n  };\n\n  if (!options?.includeStack) {\n    delete result.stack;\n  }\n\n  return result;\n}\n\n/**\n * Deserializes a serialized error object back to an Error.\n */\nexport function deserializeError<T extends Error = Error>(\n  data: SerializedError,\n): T {\n  const result = deserializeErrorInternal(data) as T;\n  if (!data.stack) {\n    result.stack = undefined;\n  }\n  return result;\n}\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SerializedError } from './error';\n\n/**\n * A standard shape of JSON data returned as the body of backend errors.\n */\nexport type ErrorResponse = {\n  /** Details of the error that was caught */\n  error: SerializedError;\n\n  /** Details about the incoming request */\n  request?: {\n    /** The HTTP method of the request */\n    method: string;\n    /** The URL of the request (excluding protocol and host/port) */\n    url: string;\n  };\n\n  /** Details about the response */\n  response: {\n    /** The numeric HTTP status code that was returned */\n    statusCode: number;\n  };\n};\n\n/**\n * Attempts to construct an ErrorResponse out of a failed server request.\n * Assumes that the response has already been checked to be not ok. This\n * function consumes the body of the response, and assumes that it hasn't\n * been consumed before.\n *\n * The code is forgiving, and constructs a useful synthetic body as best it can\n * if the response body wasn't on the expected form.\n *\n * @param response The response of a failed request\n */\nexport async function parseErrorResponse(\n  response: Response,\n): Promise<ErrorResponse> {\n  try {\n    const text = await response.text();\n    if (text) {\n      if (\n        response.headers.get('content-type')?.startsWith('application/json')\n      ) {\n        try {\n          const body = JSON.parse(text);\n          if (body.error && body.response) {\n            return body;\n          }\n        } catch {\n          // ignore\n        }\n      }\n\n      return {\n        error: {\n          name: 'Unknown',\n          message: `Request failed with status ${response.status} ${response.statusText}, ${text}`,\n        },\n        response: {\n          statusCode: response.status,\n        },\n      };\n    }\n  } catch {\n    // ignore\n  }\n\n  return {\n    error: {\n      name: 'Unknown',\n      message: `Request failed with status ${response.status} ${response.statusText}`,\n    },\n    response: {\n      statusCode: response.status,\n    },\n  };\n}\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  parseErrorResponse,\n  ErrorResponse,\n  deserializeError,\n} from '../serialization';\n\n/**\n * An error thrown as the result of a failed server request.\n *\n * The server is expected to respond on the ErrorResponse format.\n */\nexport class ResponseError extends Error {\n  /**\n   * The actual response, as seen by the client.\n   *\n   * Note that the body of this response is always consumed. Its parsed form is\n   * in the `body` field.\n   */\n  readonly response: Response;\n\n  /**\n   * The parsed JSON error body, as sent by the server.\n   */\n  readonly data: ErrorResponse;\n\n  /**\n   * The Error cause, as seen by the remote server. This is parsed out of the\n   * JSON error body.\n   *\n   * This error always has the plain Error constructor, however all\n   * serializable enumerable fields on the remote error including its name are\n   * preserved. Therefore, if you want to check the error type, use its name\n   * property rather than checking typeof or its constructor or prototype.\n   */\n  readonly cause: Error;\n\n  /**\n   * Constructs a ResponseError based on a failed response.\n   *\n   * Assumes that the response has already been checked to be not ok. This\n   * function consumes the body of the response, and assumes that it hasn't\n   * been consumed before.\n   */\n  static async fromResponse(response: Response): Promise<ResponseError> {\n    const data = await parseErrorResponse(response);\n\n    const status = data.response.statusCode || response.status;\n    const statusText = data.error.name || response.statusText;\n    const message = `Request failed with ${status} ${statusText}`;\n    const cause = deserializeError(data.error);\n\n    return new ResponseError({\n      message,\n      response,\n      data,\n      cause,\n    });\n  }\n\n  constructor(props: {\n    message: string;\n    response: Response;\n    data: ErrorResponse;\n    cause: Error;\n  }) {\n    super(props.message);\n    this.name = 'ResponseError';\n    this.response = props.response;\n    this.data = props.data;\n    this.cause = props.cause;\n  }\n}\n"],"names":["serializeErrorInternal","deserializeErrorInternal"],"mappings":";;8BAgBqC,MAAM;AAAA,EAGzC,YAAY,SAAkB,OAAe;AAnB/C;AAoBI,QAAI,cAAc;AAClB,QAAI,OAAO;AACT,UAAI,aAAa;AACf,uBAAe,eAAe;AAAA,aACzB;AACL,sBAAc,aAAa;AAAA;AAAA;AAI/B,UAAM;AAEN,gBAAM,sBAAN,+BAA0B,MAAM,KAAK;AAErC,SAAK,OAAO,KAAK,YAAY;AAC7B,SAAK,QAAQ;AAAA;AAAA;;yBCFe,gBAAgB;AAAA;kCAKP,gBAAgB;AAAA;8BAKpB,gBAAgB;AAAA;4BAQlB,gBAAgB;AAAA;4BAMhB,gBAAgB;AAAA;+BAKb,gBAAgB;AAAA;;wBClBpD,OACA,SACiB;AACjB,QAAM,aAAaA,iBAAuB;AAC1C,QAAM,SAA0B;AAAA,IAC9B,MAAM;AAAA,IACN,SAAS;AAAA,OACN;AAAA;AAGL,MAAI,qCAAU,eAAc;AAC1B,WAAO,OAAO;AAAA;AAGhB,SAAO;AAAA;0BAOP,MACG;AACH,QAAM,SAASC,mBAAyB;AACxC,MAAI,CAAC,KAAK,OAAO;AACf,WAAO,QAAQ;AAAA;AAEjB,SAAO;AAAA;;kCClBP,UACwB;AArD1B;AAsDE,MAAI;AACF,UAAM,OAAO,MAAM,SAAS;AAC5B,QAAI,MAAM;AACR,UACE,eAAS,QAAQ,IAAI,oBAArB,mBAAsC,WAAW,qBACjD;AACA,YAAI;AACF,gBAAM,OAAO,KAAK,MAAM;AACxB,cAAI,KAAK,SAAS,KAAK,UAAU;AAC/B,mBAAO;AAAA;AAAA,gBAET;AAAA;AAAA;AAKJ,aAAO;AAAA,QACL,OAAO;AAAA,UACL,MAAM;AAAA,UACN,SAAS,8BAA8B,SAAS,UAAU,SAAS,eAAe;AAAA;AAAA,QAEpF,UAAU;AAAA,UACR,YAAY,SAAS;AAAA;AAAA;AAAA;AAAA,UAI3B;AAAA;AAIF,SAAO;AAAA,IACL,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,8BAA8B,SAAS,UAAU,SAAS;AAAA;AAAA,IAErE,UAAU;AAAA,MACR,YAAY,SAAS;AAAA;AAAA;AAAA;;4BC/DQ,MAAM;AAAA,eAgC1B,aAAa,UAA4C;AACpE,UAAM,OAAO,MAAM,mBAAmB;AAEtC,UAAM,SAAS,KAAK,SAAS,cAAc,SAAS;AACpD,UAAM,aAAa,KAAK,MAAM,QAAQ,SAAS;AAC/C,UAAM,UAAU,uBAAuB,UAAU;AACjD,UAAM,QAAQ,iBAAiB,KAAK;AAEpC,WAAO,IAAI,cAAc;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA,EAIJ,YAAY,OAKT;AACD,UAAM,MAAM;AACZ,SAAK,OAAO;AACZ,SAAK,WAAW,MAAM;AACtB,SAAK,OAAO,MAAM;AAClB,SAAK,QAAQ,MAAM;AAAA;AAAA;;;;"}