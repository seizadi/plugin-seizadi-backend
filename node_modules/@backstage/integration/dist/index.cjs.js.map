{"version":3,"file":"index.cjs.js","sources":["../src/helpers.ts","../src/azure/config.ts","../src/azure/AzureIntegration.ts","../src/azure/core.ts","../src/bitbucket/config.ts","../src/bitbucket/BitbucketIntegration.ts","../src/bitbucket/core.ts","../src/github/config.ts","../src/github/core.ts","../src/github/GithubCredentialsProvider.ts","../src/github/GitHubIntegration.ts","../src/gitlab/config.ts","../src/gitlab/core.ts","../src/gitlab/GitLabIntegration.ts","../src/googleGcs/config.ts","../src/awsS3/config.ts","../src/awsS3/AwsS3Integration.ts","../src/ScmIntegrations.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\n\n/** Checks whether the given argument is a valid URL hostname */\nexport function isValidHost(host: string): boolean {\n  const check = new URL('http://example.com');\n  check.host = host;\n  return check.host === host;\n}\n\n/** Checks whether the given argument is a valid URL */\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function basicIntegrations<T extends ScmIntegration>(\n  integrations: T[],\n  getHost: (integration: T) => string,\n): ScmIntegrationsGroup<T> {\n  return {\n    list(): T[] {\n      return integrations;\n    },\n    byUrl(url: string | URL): T | undefined {\n      try {\n        const parsed = typeof url === 'string' ? new URL(url) : url;\n        return integrations.find(i => getHost(i) === parsed.host);\n      } catch {\n        return undefined;\n      }\n    },\n    byHost(host: string): T | undefined {\n      return integrations.find(i => getHost(i) === host);\n    },\n  };\n}\n\n/**\n * Default implementation of ScmIntegration.resolveUrl, that only works with\n * URL pathname based providers.\n */\nexport function defaultScmResolveUrl(options: {\n  url: string;\n  base: string;\n  lineNumber?: number;\n}): string {\n  const { url, base, lineNumber } = options;\n\n  // If it is a fully qualified URL - then return it verbatim\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return url;\n  } catch {\n    // ignore intentionally\n  }\n\n  let updated: URL;\n\n  if (url.startsWith('/')) {\n    // If it is an absolute path, move relative to the repo root\n    const { filepath } = parseGitUrl(base);\n    updated = new URL(base);\n    const repoRootPath = updated.pathname\n      .substring(0, updated.pathname.length - filepath.length)\n      .replace(/\\/+$/, '');\n    updated.pathname = `${repoRootPath}${url}`;\n  } else {\n    // For relative URLs, just let the default URL constructor handle the\n    // resolving. Note that this essentially will treat the last segment of the\n    // base as a file - NOT a folder - unless the url ends in a slash.\n    updated = new URL(url, base);\n  }\n\n  updated.search = new URL(base).search;\n  if (lineNumber) {\n    updated.hash = `L${lineNumber}`;\n  }\n  return updated.toString();\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost } from '../helpers';\n\nconst AZURE_HOST = 'dev.azure.com';\n\n/**\n * The configuration parameters for a single Azure provider.\n */\nexport type AzureIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"dev.azure.com\".\n   *\n   * Currently only \"dev.azure.com\" is supported.\n   */\n  host: string;\n\n  /**\n   * The authorization token to use for requests.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n};\n\n/**\n * Reads a single Azure integration config.\n *\n * @param config The config object of a single integration\n */\nexport function readAzureIntegrationConfig(\n  config: Config,\n): AzureIntegrationConfig {\n  const host = config.getOptionalString('host') ?? AZURE_HOST;\n  const token = config.getOptionalString('token');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Azure integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  return { host, token };\n}\n\n/**\n * Reads a set of Azure integration configs, and inserts some defaults for\n * public Azure if not specified.\n *\n * @param configs All of the integration config objects\n */\nexport function readAzureIntegrationConfigs(\n  configs: Config[],\n): AzureIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAzureIntegrationConfig);\n\n  // If no explicit dev.azure.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AZURE_HOST)) {\n    result.push({ host: AZURE_HOST });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, isValidUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AzureIntegrationConfig, readAzureIntegrationConfigs } from './config';\n\nexport class AzureIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AzureIntegration> = ({ config }) => {\n    const configs = readAzureIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.azure') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new AzureIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: AzureIntegrationConfig) {}\n\n  get type(): string {\n    return 'azure';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AzureIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  /*\n   * Azure repo URLs on the form with a `path` query param are treated specially.\n   *\n   * Example base URL: https://dev.azure.com/organization/project/_git/repository?path=%2Fcatalog-info.yaml\n   */\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base } = options;\n\n    // If we can parse the url, it is absolute - then return it verbatim\n    if (isValidUrl(url)) {\n      return url;\n    }\n\n    const parsed = parseGitUrl(base);\n    const { organization, owner, name, filepath } = parsed;\n\n    // If not an actual file path within a repo, treat the URL as raw\n    if (!organization || !owner || !name) {\n      return new URL(url, base).toString();\n    }\n\n    const path = filepath?.replace(/^\\//, '') || '';\n    const mockBaseUrl = new URL(`https://a.com/${path}`);\n    const updatedPath = new URL(url, mockBaseUrl).pathname;\n\n    const newUrl = new URL(base);\n    newUrl.searchParams.set('path', updatedPath);\n\n    if (options.lineNumber) {\n      newUrl.searchParams.set('line', String(options.lineNumber));\n      newUrl.searchParams.set('lineEnd', String(options.lineNumber + 1));\n      newUrl.searchParams.set('lineStartColumn', '1');\n      newUrl.searchParams.set('lineEndColumn', '1');\n    }\n\n    return newUrl.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for Azure, fallback to view url as I don't know\n    // how azure works.\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { AzureIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * Converts\n * from: https://dev.azure.com/{organization}/{project}/_git/reponame?path={path}&version=GB{commitOrBranch}&_a=contents\n * to:   https://dev.azure.com/{organization}/{project}/_apis/git/repositories/reponame/items?path={path}&version={commitOrBranch}\n *\n * @param url A URL pointing to a file\n */\nexport function getAzureFileFetchUrl(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n\n    const [empty, userOrOrg, project, srcKeyword, repoName] =\n      parsedUrl.pathname.split('/');\n\n    const path = parsedUrl.searchParams.get('path') || '';\n    const ref = parsedUrl.searchParams.get('version')?.substr(2);\n\n    if (\n      empty !== '' ||\n      userOrOrg === '' ||\n      project === '' ||\n      srcKeyword !== '_git' ||\n      repoName === '' ||\n      path === '' ||\n      ref === ''\n    ) {\n      throw new Error('Wrong Azure Devops URL or Invalid file path');\n    }\n\n    // transform to api\n    parsedUrl.pathname = [\n      empty,\n      userOrOrg,\n      project,\n      '_apis',\n      'git',\n      'repositories',\n      repoName,\n      'items',\n    ].join('/');\n\n    const queryParams = [`path=${path}`];\n\n    if (ref) {\n      queryParams.push(`version=${ref}`);\n    }\n\n    parsedUrl.search = queryParams.join('&');\n\n    parsedUrl.protocol = 'https';\n\n    return parsedUrl.toString();\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url A URL pointing to a path\n */\nexport function getAzureDownloadUrl(url: string): string {\n  const {\n    name: repoName,\n    owner: project,\n    organization,\n    protocol,\n    resource,\n    filepath,\n  } = parseGitUrl(url);\n\n  // scopePath will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will only download index.md but put it in the root of the archive\n  const scopePath = filepath\n    ? `&scopePath=${encodeURIComponent(filepath)}`\n    : '';\n\n  return `${protocol}://${resource}/${organization}/${project}/_apis/git/repositories/${repoName}/items?recursionLevel=full&download=true&api-version=6.0${scopePath}`;\n}\n\n/**\n * Given a URL, return the API URL to fetch commits on the branch.\n *\n * @param url A URL pointing to a repository or a sub-path\n */\nexport function getAzureCommitsUrl(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n\n    const [empty, userOrOrg, project, srcKeyword, repoName] =\n      parsedUrl.pathname.split('/');\n\n    // Remove the \"GB\" from \"GBmain\" for example.\n    const ref = parsedUrl.searchParams.get('version')?.substr(2);\n\n    if (\n      !!empty ||\n      !userOrOrg ||\n      !project ||\n      srcKeyword !== '_git' ||\n      !repoName\n    ) {\n      throw new Error('Wrong Azure Devops URL');\n    }\n\n    // transform to commits api\n    parsedUrl.pathname = [\n      empty,\n      userOrOrg,\n      project,\n      '_apis',\n      'git',\n      'repositories',\n      repoName,\n      'commits',\n    ].join('/');\n\n    const queryParams = [];\n    if (ref) {\n      queryParams.push(`searchCriteria.itemVersion.version=${ref}`);\n    }\n    parsedUrl.search = queryParams.join('&');\n\n    parsedUrl.protocol = 'https';\n\n    return parsedUrl.toString();\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config The relevant provider config\n */\nexport function getAzureRequestOptions(\n  config: AzureIntegrationConfig,\n  additionalHeaders?: Record<string, string>,\n): RequestInit {\n  const headers: HeadersInit = additionalHeaders\n    ? { ...additionalHeaders }\n    : {};\n\n  if (config.token) {\n    const buffer = Buffer.from(`:${config.token}`, 'utf8');\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return { headers };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost } from '../helpers';\n\nconst BITBUCKET_HOST = 'bitbucket.org';\nconst BITBUCKET_API_BASE_URL = 'https://api.bitbucket.org/2.0';\n\n/**\n * The configuration parameters for a single Bitbucket API provider.\n */\nexport type BitbucketIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"bitbucket.org\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.bitbucket.org/2.0\",\n   * with no trailing slash.\n   *\n   * May be omitted specifically for Bitbucket Cloud; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl?: string;\n\n  /**\n   * The authorization token to use for requests to a Bitbucket Server provider.\n   *\n   * See https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The username to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  username?: string;\n\n  /**\n   * Authentication with Bitbucket Cloud (bitbucket.org) is done using app passwords.\n   *\n   * See https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/\n   */\n  appPassword?: string;\n};\n\n/**\n * Reads a single Bitbucket integration config.\n *\n * @param config The config object of a single integration\n */\nexport function readBitbucketIntegrationConfig(\n  config: Config,\n): BitbucketIntegrationConfig {\n  const host = config.getOptionalString('host') ?? BITBUCKET_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token');\n  const username = config.getOptionalString('username');\n  const appPassword = config.getOptionalString('appPassword');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Bitbucket integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = apiBaseUrl.replace(/\\/+$/, '');\n  } else if (host === BITBUCKET_HOST) {\n    apiBaseUrl = BITBUCKET_API_BASE_URL;\n  }\n\n  return {\n    host,\n    apiBaseUrl,\n    token,\n    username,\n    appPassword,\n  };\n}\n\n/**\n * Reads a set of Bitbucket integration configs, and inserts some defaults for\n * public Bitbucket if not specified.\n *\n * @param configs All of the integration config objects\n */\nexport function readBitbucketIntegrationConfigs(\n  configs: Config[],\n): BitbucketIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readBitbucketIntegrationConfig);\n\n  // If no explicit bitbucket.org integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === BITBUCKET_HOST)) {\n    result.push({\n      host: BITBUCKET_HOST,\n      apiBaseUrl: BITBUCKET_API_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketIntegrationConfig,\n  readBitbucketIntegrationConfigs,\n} from './config';\n\nexport class BitbucketIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucket') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: BitbucketIntegrationConfig) {}\n\n  get type(): string {\n    return 'bitbucket';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n\n    // Bitbucket line numbers use the syntax #example.txt-42, rather than #L42\n    if (options.lineNumber) {\n      const url = new URL(resolved);\n\n      const filename = url.pathname.split('/').slice(-1)[0];\n      url.hash = `${filename}-${options.lineNumber}`;\n      return url.toString();\n    }\n\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    // TODO: Not sure what spa=0 does, at least bitbucket.org doesn't support it\n    // but this is taken over from the initial implementation.\n    editUrl.searchParams.set('spa', '0');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url A URL pointing to a path\n * @param config The relevant provider config\n */\nexport async function getBitbucketDefaultBranch(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project, resource } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n  // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp184\n  let branchUrl = isHosted\n    ? `${config.apiBaseUrl}/repositories/${project}/${repoName}`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/default-branch`;\n\n  let response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n\n  if (response.status === 404 && !isHosted) {\n    // First try the new format, and then if it gets specifically a 404 it should try the old format\n    // (to support old  Atlassian Bitbucket v5.11.1 format )\n    branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches/default`;\n    response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n  }\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  let defaultBranch;\n  if (isHosted) {\n    const repoInfo = await response.json();\n    defaultBranch = repoInfo.mainbranch.name;\n  } else {\n    const { displayId } = await response.json();\n    defaultBranch = displayId;\n  }\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url A URL pointing to a path\n * @param config The relevant provider config\n */\nexport async function getBitbucketDownloadUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const {\n    name: repoName,\n    owner: project,\n    ref,\n    protocol,\n    resource,\n    filepath,\n  } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketDefaultBranch(url, config);\n  }\n  // path will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will download the docs folder and everything below it\n  const path = filepath ? `&path=${encodeURIComponent(filepath)}` : '';\n  const archiveUrl = isHosted\n    ? `${protocol}://${resource}/${project}/${repoName}/get/${branch}.tar.gz`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/archive?format=tgz&at=${branch}&prefix=${project}-${repoName}${path}`;\n\n  return archiveUrl;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * Converts\n * from: https://bitbucket.org/orgname/reponame/src/master/file.yaml\n * to:   https://api.bitbucket.org/2.0/repositories/orgname/reponame/src/master/file.yaml\n *\n * @param url A URL pointing to a file\n * @param config The relevant provider config\n */\nexport function getBitbucketFileFetchUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      (filepathtype !== 'browse' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'src')\n    ) {\n      throw new Error('Invalid Bitbucket URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n\n    if (config.host === 'bitbucket.org') {\n      if (!ref) {\n        throw new Error('Invalid Bitbucket URL or file path');\n      }\n      return `${config.apiBaseUrl}/repositories/${owner}/${name}/src/${ref}/${pathWithoutSlash}`;\n    }\n    return `${config.apiBaseUrl}/projects/${owner}/repos/${name}/raw/${pathWithoutSlash}?at=${ref}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config The relevant provider config\n */\nexport function getBitbucketRequestOptions(\n  config: BitbucketIntegrationConfig,\n): RequestInit {\n  const headers: HeadersInit = {};\n\n  if (config.token) {\n    headers.Authorization = `Bearer ${config.token}`;\n  } else if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost } from '../helpers';\n\nconst GITHUB_HOST = 'github.com';\nconst GITHUB_API_BASE_URL = 'https://api.github.com';\nconst GITHUB_RAW_BASE_URL = 'https://raw.githubusercontent.com';\n\n/**\n * The configuration parameters for a single GitHub integration.\n */\nexport type GitHubIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"github.com\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.github.com\",\n   * with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl?: string;\n\n  /**\n   * The base URL of the raw fetch endpoint of this provider, e.g.\n   * \"https://raw.githubusercontent.com\", with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  rawBaseUrl?: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The GitHub Apps configuration to use for requests to this provider.\n   *\n   * If no apps are specified, token or anonymous is used.\n   */\n  apps?: GithubAppConfig[];\n};\n\n/**\n * The configuration parameters for authenticating a GitHub Application.\n * A Github Apps configuration can be generated using the `backstage-cli create-github-app` command.\n */\nexport type GithubAppConfig = {\n  /**\n   * Unique app identifier, found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  appId: number;\n  /**\n   * The private key is used by the GitHub App integration to authenticate the app.\n   * A private key can be generated from the app at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  privateKey: string;\n  /**\n   * Webhook secret can be configured at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  webhookSecret: string;\n  /**\n   * Found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientId: string;\n  /**\n   * Client secrets can be generated at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientSecret: string;\n  /**\n   * List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.\n   * However you can list the installations with the GitHub API. You can find the list of installations here:\n   * https://api.github.com/app/installations\n   * The relevant documentation for this is here.\n   * https://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples\n   */\n  allowedInstallationOwners?: string[];\n};\n\n/**\n * Reads a single GitHub integration config.\n *\n * @param config The config object of a single integration\n */\nexport function readGitHubIntegrationConfig(\n  config: Config,\n): GitHubIntegrationConfig {\n  const host = config.getOptionalString('host') ?? GITHUB_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  let rawBaseUrl = config.getOptionalString('rawBaseUrl');\n  const token = config.getOptionalString('token');\n  const apps = config.getOptionalConfigArray('apps')?.map(c => ({\n    appId: c.getNumber('appId'),\n    clientId: c.getString('clientId'),\n    clientSecret: c.getString('clientSecret'),\n    webhookSecret: c.getString('webhookSecret'),\n    privateKey: c.getString('privateKey'),\n    allowedInstallationOwners: c.getOptionalStringArray(\n      'allowedInstallationOwners',\n    ),\n  }));\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitHub integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = apiBaseUrl.replace(/\\/+$/, '');\n  } else if (host === GITHUB_HOST) {\n    apiBaseUrl = GITHUB_API_BASE_URL;\n  }\n\n  if (rawBaseUrl) {\n    rawBaseUrl = rawBaseUrl.replace(/\\/+$/, '');\n  } else if (host === GITHUB_HOST) {\n    rawBaseUrl = GITHUB_RAW_BASE_URL;\n  }\n\n  return { host, apiBaseUrl, rawBaseUrl, token, apps };\n}\n\n/**\n * Reads a set of GitHub integration configs, and inserts some defaults for\n * public GitHub if not specified.\n *\n * @param configs All of the integration config objects\n */\nexport function readGitHubIntegrationConfigs(\n  configs: Config[],\n): GitHubIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGitHubIntegrationConfig);\n\n  // If no explicit github.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === GITHUB_HOST)) {\n    result.push({\n      host: GITHUB_HOST,\n      apiBaseUrl: GITHUB_API_BASE_URL,\n      rawBaseUrl: GITHUB_RAW_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { GitHubIntegrationConfig } from './config';\nimport { GithubCredentials } from './GithubCredentialsProvider';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * Converts\n * from: https://github.com/a/b/blob/branchname/path/to/c.yaml\n * to:   https://api.github.com/repos/a/b/contents/path/to/c.yaml?ref=branchname\n * or:   https://raw.githubusercontent.com/a/b/branchname/c.yaml\n *\n * @param url A URL pointing to a file\n * @param config The relevant provider config\n */\nexport function getGitHubFileFetchUrl(\n  url: string,\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      !ref ||\n      // GitHub is automatically redirecting tree urls to blob urls so it's\n      // fine to pass a tree url.\n      (filepathtype !== 'blob' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'tree')\n    ) {\n      throw new Error('Invalid GitHub URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n    if (chooseEndpoint(config, credentials) === 'api') {\n      return `${config.apiBaseUrl}/repos/${owner}/${name}/contents/${pathWithoutSlash}?ref=${ref}`;\n    }\n    return `${config.rawBaseUrl}/${owner}/${name}/${ref}/${pathWithoutSlash}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @deprecated This function is no longer used internally\n * @param config The relevant provider config\n */\nexport function getGitHubRequestOptions(\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): RequestInit {\n  const headers: HeadersInit = {};\n\n  if (chooseEndpoint(config, credentials) === 'api') {\n    headers.Accept = 'application/vnd.github.v3.raw';\n  }\n\n  if (credentials.token) {\n    headers.Authorization = `token ${credentials.token}`;\n  }\n\n  return { headers };\n}\n\nexport function chooseEndpoint(\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): 'api' | 'raw' {\n  if (config.apiBaseUrl && (credentials.token || !config.rawBaseUrl)) {\n    return 'api';\n  }\n  return 'raw';\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { GithubAppConfig, GitHubIntegrationConfig } from './config';\nimport { createAppAuth } from '@octokit/auth-app';\nimport { Octokit, RestEndpointMethodTypes } from '@octokit/rest';\nimport { DateTime } from 'luxon';\n\ntype InstallationData = {\n  installationId: number;\n  suspended: boolean;\n};\n\nclass Cache {\n  private readonly tokenCache = new Map<\n    string,\n    { token: string; expiresAt: DateTime }\n  >();\n\n  async getOrCreateToken(\n    key: string,\n    supplier: () => Promise<{ token: string; expiresAt: DateTime }>,\n  ): Promise<{ accessToken: string }> {\n    const item = this.tokenCache.get(key);\n    if (item && this.isNotExpired(item.expiresAt)) {\n      return { accessToken: item.token };\n    }\n\n    const result = await supplier();\n    this.tokenCache.set(key, result);\n    return { accessToken: result.token };\n  }\n\n  // consider timestamps older than 50 minutes to be expired.\n  private isNotExpired = (date: DateTime) =>\n    date.diff(DateTime.local(), 'minutes').minutes > 50;\n}\n\n/**\n * This accept header is required when calling App APIs in GitHub Enterprise.\n * It has no effect on calls to github.com and can probably be removed entirely\n * once GitHub Apps is out of preview.\n */\nconst HEADERS = {\n  Accept: 'application/vnd.github.machine-man-preview+json',\n};\n\n/**\n * GithubAppManager issues and caches tokens for a specific GitHub App.\n */\nclass GithubAppManager {\n  private readonly appClient: Octokit;\n  private readonly baseAuthConfig: { appId: number; privateKey: string };\n  private readonly cache = new Cache();\n  private readonly allowedInstallationOwners: string[] | undefined; // undefined allows all installations\n\n  constructor(config: GithubAppConfig, baseUrl?: string) {\n    this.allowedInstallationOwners = config.allowedInstallationOwners;\n    this.baseAuthConfig = {\n      appId: config.appId,\n      privateKey: config.privateKey,\n    };\n    this.appClient = new Octokit({\n      baseUrl,\n      headers: HEADERS,\n      authStrategy: createAppAuth,\n      auth: this.baseAuthConfig,\n    });\n  }\n\n  async getInstallationCredentials(\n    owner: string,\n    repo?: string,\n  ): Promise<{ accessToken: string }> {\n    const { installationId, suspended } = await this.getInstallationData(owner);\n    if (this.allowedInstallationOwners) {\n      if (!this.allowedInstallationOwners?.includes(owner)) {\n        throw new Error(\n          `The GitHub application for ${owner} is not included in the allowed installation list (${installationId}).`,\n        );\n      }\n    }\n    if (suspended) {\n      throw new Error(`The GitHub application for ${owner} is suspended`);\n    }\n\n    const cacheKey = repo ? `${owner}/${repo}` : owner;\n\n    // Go and grab an access token for the app scoped to a repository if provided, if not use the organisation installation.\n    return this.cache.getOrCreateToken(cacheKey, async () => {\n      const result = await this.appClient.apps.createInstallationAccessToken({\n        installation_id: installationId,\n        headers: HEADERS,\n      });\n      if (repo && result.data.repository_selection === 'selected') {\n        const installationClient = new Octokit({\n          auth: result.data.token,\n        });\n        const repos =\n          await installationClient.apps.listReposAccessibleToInstallation();\n        const hasRepo = repos.data.repositories.some(repository => {\n          return repository.name === repo;\n        });\n        if (!hasRepo) {\n          throw new Error(\n            `The Backstage GitHub application used in the ${owner} organization does not have access to a repository with the name ${repo}`,\n          );\n        }\n      }\n      return {\n        token: result.data.token,\n        expiresAt: DateTime.fromISO(result.data.expires_at),\n      };\n    });\n  }\n\n  getInstallations(): Promise<\n    RestEndpointMethodTypes['apps']['listInstallations']['response']['data']\n  > {\n    return this.appClient.paginate(this.appClient.apps.listInstallations);\n  }\n\n  private async getInstallationData(owner: string): Promise<InstallationData> {\n    const allInstallations = await this.getInstallations();\n    const installation = allInstallations.find(\n      inst => inst.account?.login?.toLowerCase() === owner.toLowerCase(),\n    );\n    if (installation) {\n      return {\n        installationId: installation.id,\n        suspended: Boolean(installation.suspended_by),\n      };\n    }\n    const notFoundError = new Error(\n      `No app installation found for ${owner} in ${this.baseAuthConfig.appId}`,\n    );\n    notFoundError.name = 'NotFoundError';\n    throw notFoundError;\n  }\n}\n\n// GithubAppCredentialsMux corresponds to a Github installation which internally could hold several GitHub Apps.\nexport class GithubAppCredentialsMux {\n  private readonly apps: GithubAppManager[];\n\n  constructor(config: GitHubIntegrationConfig) {\n    this.apps =\n      config.apps?.map(ac => new GithubAppManager(ac, config.apiBaseUrl)) ?? [];\n  }\n\n  async getAllInstallations(): Promise<\n    RestEndpointMethodTypes['apps']['listInstallations']['response']['data']\n  > {\n    if (!this.apps.length) {\n      return [];\n    }\n\n    const installs = await Promise.all(\n      this.apps.map(app => app.getInstallations()),\n    );\n\n    return installs.flat();\n  }\n\n  async getAppToken(owner: string, repo?: string): Promise<string | undefined> {\n    if (this.apps.length === 0) {\n      return undefined;\n    }\n\n    const results = await Promise.all(\n      this.apps.map(app =>\n        app.getInstallationCredentials(owner, repo).then(\n          credentials => ({ credentials, error: undefined }),\n          error => ({ credentials: undefined, error }),\n        ),\n      ),\n    );\n\n    const result = results.find(resultItem => resultItem.credentials);\n    if (result) {\n      return result.credentials!.accessToken;\n    }\n\n    const errors = results.map(r => r.error);\n    const notNotFoundError = errors.find(err => err.name !== 'NotFoundError');\n    if (notNotFoundError) {\n      throw notNotFoundError;\n    }\n\n    return undefined;\n  }\n}\n\nexport type GithubCredentialType = 'app' | 'token';\n\nexport type GithubCredentials = {\n  headers?: { [name: string]: string };\n  token?: string;\n  type: GithubCredentialType;\n};\n\n// TODO: Possibly move this to a backend only package so that it's not used in the frontend by mistake\nexport class GithubCredentialsProvider {\n  static create(config: GitHubIntegrationConfig): GithubCredentialsProvider {\n    return new GithubCredentialsProvider(\n      new GithubAppCredentialsMux(config),\n      config.token,\n    );\n  }\n\n  private constructor(\n    private readonly githubAppCredentialsMux: GithubAppCredentialsMux,\n    private readonly token?: string,\n  ) {}\n\n  /**\n   * Returns GithubCredentials for requested url.\n   * Consecutive calls to this method with the same url will return cached credentials.\n   * The shortest lifetime for a token returned is 10 minutes.\n   * @param opts containing the organization or repository url\n   * @returns {Promise} of @type {GithubCredentials}.\n   * @example\n   * const { token, headers } = await getCredentials({url: 'github.com/backstage/foobar'})\n   */\n  async getCredentials(opts: { url: string }): Promise<GithubCredentials> {\n    const parsed = parseGitUrl(opts.url);\n\n    const owner = parsed.owner || parsed.name;\n    const repo = parsed.owner ? parsed.name : undefined;\n\n    let type: GithubCredentialType = 'app';\n    let token = await this.githubAppCredentialsMux.getAppToken(owner, repo);\n    if (!token) {\n      type = 'token';\n      token = this.token;\n    }\n\n    return {\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n      token,\n      type,\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GitHubIntegrationConfig,\n  readGitHubIntegrationConfigs,\n} from './config';\n\nexport class GitHubIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GitHubIntegration> = ({ config }) => {\n    const configs = readGitHubIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.github') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GitHubIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GitHubIntegrationConfig) {}\n\n  get type(): string {\n    return 'github';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GitHubIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    // GitHub uses blob URLs for files and tree urls for directory listings. But\n    // there is a redirect from tree to blob for files, so we can always return\n    // tree urls here.\n    return replaceUrlType(defaultScmResolveUrl(options), 'tree');\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceUrlType(url, 'edit');\n  }\n}\n\nexport function replaceUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(\n    /\\/\\/([^/]+)\\/([^/]+)\\/([^/]+)\\/(blob|tree|edit)\\//,\n    (_, host, owner, repo) => {\n      return `//${host}/${owner}/${repo}/${type}/`;\n    },\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost, isValidUrl } from '../helpers';\n\nconst GITLAB_HOST = 'gitlab.com';\nconst GITLAB_API_BASE_URL = 'https://gitlab.com/api/v4';\n\n/**\n * The configuration parameters for a single GitLab integration.\n */\nexport type GitLabIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"gitlab.com\".\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g.\n   * \"https://gitlab.com/api/v4\", with no trailing slash.\n   *\n   * May be omitted specifically for public GitLab; then it will be deduced.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The baseUrl of this provider, e.g. \"https://gitlab.com\", which is passed\n   * into the GitLab client.\n   *\n   * If no baseUrl is provided, it will default to https://${host}\n   */\n  baseUrl: string;\n};\n\n/**\n * Reads a single GitLab integration config.\n *\n * @param config The config object of a single integration\n */\nexport function readGitLabIntegrationConfig(\n  config: Config,\n): GitLabIntegrationConfig {\n  const host = config.getString('host');\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token');\n  let baseUrl = config.getOptionalString('baseUrl');\n\n  if (apiBaseUrl) {\n    apiBaseUrl = apiBaseUrl.replace(/\\/+$/, '');\n  } else if (host === GITLAB_HOST) {\n    apiBaseUrl = GITLAB_API_BASE_URL;\n  }\n\n  if (baseUrl) {\n    baseUrl = baseUrl.replace(/\\/+$/, '');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n\n  if (host.includes(':')) {\n    throw new Error(\n      `Invalid GitLab integration config, host '${host}' should just be the host name (e.g. \"github.com\"), not a URL`,\n    );\n  } else if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${host}' is not a valid host`,\n    );\n  } else if (!apiBaseUrl || !isValidUrl(apiBaseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${apiBaseUrl}' is not a valid apiBaseUrl`,\n    );\n  } else if (!isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  }\n\n  return { host, token, apiBaseUrl, baseUrl };\n}\n\n/**\n * Reads a set of GitLab integration configs, and inserts some defaults for\n * public GitLab if not specified.\n *\n * @param configs All of the integration config objects\n */\nexport function readGitLabIntegrationConfigs(\n  configs: Config[],\n): GitLabIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGitLabIntegrationConfig);\n\n  // As a convenience we always make sure there's at least an unauthenticated\n  // reader for public gitlab repos.\n  if (!result.some(c => c.host === GITLAB_HOST)) {\n    result.push({\n      host: GITLAB_HOST,\n      apiBaseUrl: GITLAB_API_BASE_URL,\n      baseUrl: `https://${GITLAB_HOST}`,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitLabIntegrationConfig } from './config';\nimport fetch from 'cross-fetch';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * Converts\n * from: https://gitlab.example.com/a/b/blob/master/c.yaml\n * to:   https://gitlab.example.com/a/b/raw/master/c.yaml\n * -or-\n * from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\n *\n * @param url A URL pointing to a file\n * @param config The relevant provider config\n */\nexport async function getGitLabFileFetchUrl(\n  url: string,\n  config: GitLabIntegrationConfig,\n): Promise<string> {\n  // TODO(Rugvip): From the old GitlabReaderProcessor; used\n  // the existence of /-/blob/ to switch the logic. Don't know if this\n  // makes sense and it might require some more work.\n  if (url.includes('/-/blob/')) {\n    const projectID = await getProjectId(url, config);\n    return buildProjectUrl(url, projectID).toString();\n  }\n  return buildRawUrl(url).toString();\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config The relevant provider config\n */\nexport function getGitLabRequestOptions(\n  config: GitLabIntegrationConfig,\n): RequestInit {\n  const { token = '' } = config;\n  return {\n    headers: {\n      'PRIVATE-TOKEN': token,\n    },\n  };\n}\n\n// Converts\n// from: https://gitlab.example.com/a/b/blob/master/c.yaml\n// to:   https://gitlab.example.com/a/b/raw/master/c.yaml\nexport function buildRawUrl(target: string): URL {\n  try {\n    const url = new URL(target);\n\n    const [empty, userOrOrg, repoName, blobKeyword, ...restOfPath] =\n      url.pathname.split('/');\n\n    if (\n      empty !== '' ||\n      userOrOrg === '' ||\n      repoName === '' ||\n      blobKeyword !== 'blob' ||\n      !restOfPath.join('/').match(/\\.yaml$/)\n    ) {\n      throw new Error('Wrong GitLab URL');\n    }\n\n    // Replace 'blob' with 'raw'\n    url.pathname = [empty, userOrOrg, repoName, 'raw', ...restOfPath].join('/');\n\n    return url;\n  } catch (e) {\n    throw new Error(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Converts\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\nexport function buildProjectUrl(target: string, projectID: Number): URL {\n  try {\n    const url = new URL(target);\n\n    const branchAndFilePath = url.pathname.split('/-/blob/')[1];\n    const [branch, ...filePath] = branchAndFilePath.split('/');\n\n    url.pathname = [\n      '/api/v4/projects',\n      projectID,\n      'repository/files',\n      encodeURIComponent(decodeURIComponent(filePath.join('/'))),\n      'raw',\n    ].join('/');\n    url.search = `?ref=${branch}`;\n\n    return url;\n  } catch (e) {\n    throw new Error(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Convert\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   The project ID that corresponds to the URL\nexport async function getProjectId(\n  target: string,\n  config: GitLabIntegrationConfig,\n): Promise<number> {\n  const url = new URL(target);\n\n  if (!url.pathname.includes('/-/blob/')) {\n    throw new Error('Please provide full path to yaml file from GitLab');\n  }\n\n  try {\n    const repo = url.pathname.split('/-/blob/')[0];\n\n    // Convert\n    // to: https://gitlab.com/api/v4/projects/groupA%2Fteams%2FsubgroupA%2FteamA%2Frepo\n    const repoIDLookup = new URL(\n      `${url.protocol + url.hostname}/api/v4/projects/${encodeURIComponent(\n        repo.replace(/^\\//, ''),\n      )}`,\n    );\n    const response = await fetch(\n      repoIDLookup.toString(),\n      getGitLabRequestOptions(config),\n    );\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `GitLab Error '${data.error}', ${data.error_description}`,\n      );\n    }\n\n    return Number(data.id);\n  } catch (e) {\n    throw new Error(`Could not get GitLab project ID for: ${target}, ${e}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GitLabIntegrationConfig,\n  readGitLabIntegrationConfigs,\n} from './config';\n\nexport class GitLabIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GitLabIntegration> = ({ config }) => {\n    const configs = readGitLabIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gitlab') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GitLabIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GitLabIntegrationConfig) {}\n\n  get type(): string {\n    return 'gitlab';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GitLabIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    return defaultScmResolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceUrlType(url, 'edit');\n  }\n}\n\nexport function replaceUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(/\\/\\-\\/(blob|tree|edit)\\//, `/-/${type}/`);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n/**\n * The configuration parameters for a single Google Cloud Storage provider.\n */\nexport type GoogleGcsIntegrationConfig = {\n  /**\n   * Service account email used to authenticate requests.\n   */\n  clientEmail?: string;\n  /**\n   * Service account private key used to authenticate requests.\n   */\n  privateKey?: string;\n};\n\n/**\n * Reads a single Google GCS integration config.\n *\n * @param config The config object of a single integration\n */\nexport function readGoogleGcsIntegrationConfig(\n  config: Config,\n): GoogleGcsIntegrationConfig {\n  if (!config) {\n    return {};\n  }\n\n  if (!config.has('clientEmail') && !config.has('privateKey')) {\n    return {};\n  }\n\n  const privateKey = config.getString('privateKey').split('\\\\n').join('\\n');\n\n  const clientEmail = config.getString('clientEmail');\n  return { clientEmail: clientEmail, privateKey: privateKey };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost } from '../helpers';\n\nconst AMAZON_AWS_HOST = 'amazonaws.com';\n\n/**\n * The configuration parameters for a single AWS S3 provider.\n */\n\nexport type AwsS3IntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"amazonaws.com\"\n   *\n   * Currently only \"amazonaws.com\" is supported.\n   */\n  host: string;\n\n  /**\n   * accessKeyId\n   */\n  accessKeyId?: string;\n\n  /**\n   * secretAccessKey\n   */\n  secretAccessKey?: string;\n\n  /**\n   * roleArn\n   */\n  roleArn?: string;\n};\n\n/**\n * Reads a single Aws S3 integration config.\n *\n * @param config The config object of a single integration\n */\n\nexport function readAwsS3IntegrationConfig(\n  config: Config,\n): AwsS3IntegrationConfig {\n  const host = config.getOptionalString('host') ?? AMAZON_AWS_HOST;\n  const accessKeyId = config.getOptionalString('accessKeyId');\n  const secretAccessKey = config.getOptionalString('secretAccessKey');\n  const roleArn = config.getOptionalString('roleArn');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid awsS3 integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  return { host, accessKeyId, secretAccessKey, roleArn };\n}\n\nexport function readAwsS3IntegrationConfigs(\n  configs: Config[],\n): AwsS3IntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAwsS3IntegrationConfig);\n\n  // If no explicit amazonaws.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AMAZON_AWS_HOST)) {\n    result.push({\n      host: AMAZON_AWS_HOST,\n    });\n  }\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AwsS3IntegrationConfig, readAwsS3IntegrationConfigs } from './config';\n\nexport class AwsS3Integration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AwsS3Integration> = ({ config }) => {\n    const configs = readAwsS3IntegrationConfigs(\n      config.getOptionalConfigArray('integrations.awsS3') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new AwsS3Integration(c)),\n      i => i.config.host,\n    );\n  };\n\n  get type(): string {\n    return 'awsS3';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AwsS3IntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  constructor(private readonly integrationConfig: AwsS3IntegrationConfig) {}\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number | undefined;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for awsS3\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AwsS3Integration } from './awsS3/AwsS3Integration';\nimport { AzureIntegration } from './azure/AzureIntegration';\nimport { BitbucketIntegration } from './bitbucket/BitbucketIntegration';\nimport { GitHubIntegration } from './github/GitHubIntegration';\nimport { GitLabIntegration } from './gitlab/GitLabIntegration';\nimport { defaultScmResolveUrl } from './helpers';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\nimport { ScmIntegrationRegistry } from './registry';\n\ntype IntegrationsByType = {\n  awsS3: ScmIntegrationsGroup<AwsS3Integration>;\n  azure: ScmIntegrationsGroup<AzureIntegration>;\n  bitbucket: ScmIntegrationsGroup<BitbucketIntegration>;\n  github: ScmIntegrationsGroup<GitHubIntegration>;\n  gitlab: ScmIntegrationsGroup<GitLabIntegration>;\n};\n\nexport class ScmIntegrations implements ScmIntegrationRegistry {\n  private readonly byType: IntegrationsByType;\n\n  static fromConfig(config: Config): ScmIntegrations {\n    return new ScmIntegrations({\n      awsS3: AwsS3Integration.factory({ config }),\n      azure: AzureIntegration.factory({ config }),\n      bitbucket: BitbucketIntegration.factory({ config }),\n      github: GitHubIntegration.factory({ config }),\n      gitlab: GitLabIntegration.factory({ config }),\n    });\n  }\n\n  constructor(integrationsByType: IntegrationsByType) {\n    this.byType = integrationsByType;\n  }\n\n  get awsS3(): ScmIntegrationsGroup<AwsS3Integration> {\n    return this.byType.awsS3;\n  }\n\n  get azure(): ScmIntegrationsGroup<AzureIntegration> {\n    return this.byType.azure;\n  }\n\n  get bitbucket(): ScmIntegrationsGroup<BitbucketIntegration> {\n    return this.byType.bitbucket;\n  }\n\n  get github(): ScmIntegrationsGroup<GitHubIntegration> {\n    return this.byType.github;\n  }\n\n  get gitlab(): ScmIntegrationsGroup<GitLabIntegration> {\n    return this.byType.gitlab;\n  }\n\n  list(): ScmIntegration[] {\n    return Object.values(this.byType).flatMap(\n      i => i.list() as ScmIntegration[],\n    );\n  }\n\n  byUrl(url: string | URL): ScmIntegration | undefined {\n    return Object.values(this.byType)\n      .map(i => i.byUrl(url))\n      .find(Boolean);\n  }\n\n  byHost(host: string): ScmIntegration | undefined {\n    return Object.values(this.byType)\n      .map(i => i.byHost(host))\n      .find(Boolean);\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const integration = this.byUrl(options.base);\n    if (!integration) {\n      return defaultScmResolveUrl(options);\n    }\n\n    return integration.resolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    const integration = this.byUrl(url);\n    if (!integration) {\n      return url;\n    }\n\n    return integration.resolveEditUrl(url);\n  }\n}\n"],"names":["parseGitUrl","fetch","DateTime","Octokit","createAppAuth","replaceUrlType"],"mappings":";;;;;;;;;;;;;;;qBAoB4B,MAAuB;AACjD,QAAM,QAAQ,IAAI,IAAI;AACtB,QAAM,OAAO;AACb,SAAO,MAAM,SAAS;AAAA;oBAIG,KAAsB;AAC/C,MAAI;AAEF,QAAI,IAAI;AACR,WAAO;AAAA,UACP;AACA,WAAO;AAAA;AAAA;2BAKT,cACA,SACyB;AACzB,SAAO;AAAA,IACL,OAAY;AACV,aAAO;AAAA;AAAA,IAET,MAAM,KAAkC;AACtC,UAAI;AACF,cAAM,SAAS,OAAO,QAAQ,WAAW,IAAI,IAAI,OAAO;AACxD,eAAO,aAAa,KAAK,OAAK,QAAQ,OAAO,OAAO;AAAA,cACpD;AACA,eAAO;AAAA;AAAA;AAAA,IAGX,OAAO,MAA6B;AAClC,aAAO,aAAa,KAAK,OAAK,QAAQ,OAAO;AAAA;AAAA;AAAA;8BASd,SAI1B;AACT,QAAM,CAAE,KAAK,MAAM,cAAe;AAGlC,MAAI;AAEF,QAAI,IAAI;AACR,WAAO;AAAA,UACP;AAAA;AAIF,MAAI;AAEJ,MAAI,IAAI,WAAW,MAAM;AAEvB,UAAM,CAAE,YAAaA,gCAAY;AACjC,cAAU,IAAI,IAAI;AAClB,UAAM,eAAe,QAAQ,SAC1B,UAAU,GAAG,QAAQ,SAAS,SAAS,SAAS,QAChD,QAAQ,QAAQ;AACnB,YAAQ,WAAW,GAAG,eAAe;AAAA,SAChC;AAIL,cAAU,IAAI,IAAI,KAAK;AAAA;AAGzB,UAAQ,SAAS,IAAI,IAAI,MAAM;AAC/B,MAAI,YAAY;AACd,YAAQ,OAAO,IAAI;AAAA;AAErB,SAAO,QAAQ;AAAA;;ACjFjB,MAAM,aAAa;oCA2BjB,QACwB;AA/C1B;AAgDE,QAAM,OAAO,aAAO,kBAAkB,YAAzB,YAAoC;AACjD,QAAM,QAAQ,OAAO,kBAAkB;AAEvC,MAAI,CAAC,YAAY,OAAO;AACtB,UAAM,IAAI,MACR,sCAAsC;AAAA;AAI1C,SAAO,CAAE,MAAM;AAAA;qCAUf,SAC0B;AAE1B,QAAM,SAAS,QAAQ,IAAI;AAI3B,MAAI,CAAC,OAAO,KAAK,OAAK,EAAE,SAAS,aAAa;AAC5C,WAAO,KAAK,CAAE,MAAM;AAAA;AAGtB,SAAO;AAAA;;ACzDF,gCAAiD;AAAA,EAWtD,YAA6B,mBAA2C;AAA3C;AAAA;AAAA,MAEzB,OAAe;AACjB,WAAO;AAAA;AAAA,MAGL,QAAgB;AAClB,WAAO,KAAK,kBAAkB;AAAA;AAAA,MAG5B,SAAiC;AACnC,WAAO,KAAK;AAAA;AAAA,EAQd,WAAW,SAIA;AACT,UAAM,CAAE,KAAK,QAAS;AAGtB,QAAI,WAAW,MAAM;AACnB,aAAO;AAAA;AAGT,UAAM,SAASA,gCAAY;AAC3B,UAAM,CAAE,cAAc,OAAO,MAAM,YAAa;AAGhD,QAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM;AACpC,aAAO,IAAI,IAAI,KAAK,MAAM;AAAA;AAG5B,UAAM,OAAO,sCAAU,QAAQ,OAAO,QAAO;AAC7C,UAAM,cAAc,IAAI,IAAI,iBAAiB;AAC7C,UAAM,cAAc,IAAI,IAAI,KAAK,aAAa;AAE9C,UAAM,SAAS,IAAI,IAAI;AACvB,WAAO,aAAa,IAAI,QAAQ;AAEhC,QAAI,QAAQ,YAAY;AACtB,aAAO,aAAa,IAAI,QAAQ,OAAO,QAAQ;AAC/C,aAAO,aAAa,IAAI,WAAW,OAAO,QAAQ,aAAa;AAC/D,aAAO,aAAa,IAAI,mBAAmB;AAC3C,aAAO,aAAa,IAAI,iBAAiB;AAAA;AAG3C,WAAO,OAAO;AAAA;AAAA,EAGhB,eAAe,KAAqB;AAGlC,WAAO;AAAA;AAAA;;AAtEJ,iBACE,UAAoD,CAAC,CAAE,YAAa;AAtB7E;AAuBI,QAAM,UAAU,4BACd,aAAO,uBAAuB,0BAA9B,YAAuD;AAEzD,SAAO,kBACL,QAAQ,IAAI,OAAK,IAAI,kBAAiB,KACtC,OAAK,EAAE,OAAO;AAAA;;8BCCiB,KAAqB;AA7B1D;AA8BE,MAAI;AACF,UAAM,YAAY,IAAI,IAAI;AAE1B,UAAM,CAAC,OAAO,WAAW,SAAS,YAAY,YAC5C,UAAU,SAAS,MAAM;AAE3B,UAAM,OAAO,UAAU,aAAa,IAAI,WAAW;AACnD,UAAM,MAAM,gBAAU,aAAa,IAAI,eAA3B,mBAAuC,OAAO;AAE1D,QACE,UAAU,MACV,cAAc,MACd,YAAY,MACZ,eAAe,UACf,aAAa,MACb,SAAS,MACT,QAAQ,IACR;AACA,YAAM,IAAI,MAAM;AAAA;AAIlB,cAAU,WAAW;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAEP,UAAM,cAAc,CAAC,QAAQ;AAE7B,QAAI,KAAK;AACP,kBAAY,KAAK,WAAW;AAAA;AAG9B,cAAU,SAAS,YAAY,KAAK;AAEpC,cAAU,WAAW;AAErB,WAAO,UAAU;AAAA,WACV,GAAP;AACA,UAAM,IAAI,MAAM,kBAAkB,QAAQ;AAAA;AAAA;6BAUV,KAAqB;AACvD,QAAM;AAAA,IACJ,MAAM;AAAA,IACN,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACEA,gCAAY;AAKhB,QAAM,YAAY,WACd,cAAc,mBAAmB,cACjC;AAEJ,SAAO,GAAG,cAAc,YAAY,gBAAgB,kCAAkC,mEAAmE;AAAA;4BAQxH,KAAqB;AA9GxD;AA+GE,MAAI;AACF,UAAM,YAAY,IAAI,IAAI;AAE1B,UAAM,CAAC,OAAO,WAAW,SAAS,YAAY,YAC5C,UAAU,SAAS,MAAM;AAG3B,UAAM,MAAM,gBAAU,aAAa,IAAI,eAA3B,mBAAuC,OAAO;AAE1D,QACE,CAAC,CAAC,SACF,CAAC,aACD,CAAC,WACD,eAAe,UACf,CAAC,UACD;AACA,YAAM,IAAI,MAAM;AAAA;AAIlB,cAAU,WAAW;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAEP,UAAM,cAAc;AACpB,QAAI,KAAK;AACP,kBAAY,KAAK,sCAAsC;AAAA;AAEzD,cAAU,SAAS,YAAY,KAAK;AAEpC,cAAU,WAAW;AAErB,WAAO,UAAU;AAAA,WACV,GAAP;AACA,UAAM,IAAI,MAAM,kBAAkB,QAAQ;AAAA;AAAA;gCAU5C,QACA,mBACa;AACb,QAAM,UAAuB,oBACzB,IAAK,qBACL;AAEJ,MAAI,OAAO,OAAO;AAChB,UAAM,SAAS,OAAO,KAAK,IAAI,OAAO,SAAS;AAC/C,YAAQ,gBAAgB,SAAS,OAAO,SAAS;AAAA;AAGnD,SAAO,CAAE;AAAA;;AC3JX,MAAM,iBAAiB;AACvB,MAAM,yBAAyB;wCAkD7B,QAC4B;AAvE9B;AAwEE,QAAM,OAAO,aAAO,kBAAkB,YAAzB,YAAoC;AACjD,MAAI,aAAa,OAAO,kBAAkB;AAC1C,QAAM,QAAQ,OAAO,kBAAkB;AACvC,QAAM,WAAW,OAAO,kBAAkB;AAC1C,QAAM,cAAc,OAAO,kBAAkB;AAE7C,MAAI,CAAC,YAAY,OAAO;AACtB,UAAM,IAAI,MACR,0CAA0C;AAAA;AAI9C,MAAI,YAAY;AACd,iBAAa,WAAW,QAAQ,QAAQ;AAAA,aAC/B,SAAS,gBAAgB;AAClC,iBAAa;AAAA;AAGf,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;yCAWF,SAC8B;AAE9B,QAAM,SAAS,QAAQ,IAAI;AAI3B,MAAI,CAAC,OAAO,KAAK,OAAK,EAAE,SAAS,iBAAiB;AAChD,WAAO,KAAK;AAAA,MACV,MAAM;AAAA,MACN,YAAY;AAAA;AAAA;AAIhB,SAAO;AAAA;;AChGF,oCAAqD;AAAA,EAa1D,YAA6B,mBAA+C;AAA/C;AAAA;AAAA,MAEzB,OAAe;AACjB,WAAO;AAAA;AAAA,MAGL,QAAgB;AAClB,WAAO,KAAK,kBAAkB;AAAA;AAAA,MAG5B,SAAqC;AACvC,WAAO,KAAK;AAAA;AAAA,EAGd,WAAW,SAIA;AACT,UAAM,WAAW,qBAAqB;AAGtC,QAAI,QAAQ,YAAY;AACtB,YAAM,MAAM,IAAI,IAAI;AAEpB,YAAM,WAAW,IAAI,SAAS,MAAM,KAAK,MAAM,IAAI;AACnD,UAAI,OAAO,GAAG,YAAY,QAAQ;AAClC,aAAO,IAAI;AAAA;AAGb,WAAO;AAAA;AAAA,EAGT,eAAe,KAAqB;AAClC,UAAM,UAAUA,gCAAY;AAC5B,UAAM,UAAU,IAAI,IAAI;AAExB,YAAQ,aAAa,IAAI,QAAQ;AAGjC,YAAQ,aAAa,IAAI,OAAO;AAChC,YAAQ,aAAa,IAAI,MAAM,QAAQ;AACvC,WAAO,QAAQ;AAAA;AAAA;;AAtDV,qBAAA,UAAwD,CAAC;AAAA,EAC9D;AAAA,MACI;AA3BR;AA4BI,QAAM,UAAU,gCACd,aAAO,uBAAuB,8BAA9B,YAA2D;AAE7D,SAAO,kBACL,QAAQ,IAAI,OAAK,IAAI,sBAAqB,KAC1C,OAAK,EAAE,OAAO;AAAA;;yCCNlB,KACA,QACiB;AACjB,QAAM,CAAE,MAAM,UAAU,OAAO,SAAS,YAAaA,gCAAY;AAEjE,QAAM,WAAW,aAAa;AAE9B,MAAI,YAAY,WACZ,GAAG,OAAO,2BAA2B,WAAW,aAChD,GAAG,OAAO,uBAAuB,iBAAiB;AAEtD,MAAI,WAAW,MAAMC,0BAAM,WAAW,2BAA2B;AAEjE,MAAI,SAAS,WAAW,OAAO,CAAC,UAAU;AAGxC,gBAAY,GAAG,OAAO,uBAAuB,iBAAiB;AAC9D,eAAW,MAAMA,0BAAM,WAAW,2BAA2B;AAAA;AAG/D,MAAI,CAAC,SAAS,IAAI;AAChB,UAAM,UAAU,0CAA0C,cAAc,SAAS,UAAU,SAAS;AACpG,UAAM,IAAI,MAAM;AAAA;AAGlB,MAAI;AACJ,MAAI,UAAU;AACZ,UAAM,WAAW,MAAM,SAAS;AAChC,oBAAgB,SAAS,WAAW;AAAA,SAC/B;AACL,UAAM,CAAE,aAAc,MAAM,SAAS;AACrC,oBAAgB;AAAA;AAElB,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,MACR,sCAAsC,uBACxB,SAAS,UAAU,SAAS;AAAA;AAG9C,SAAO;AAAA;uCAWP,KACA,QACiB;AACjB,QAAM;AAAA,IACJ,MAAM;AAAA,IACN,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACED,gCAAY;AAEhB,QAAM,WAAW,aAAa;AAE9B,MAAI,SAAS;AACb,MAAI,CAAC,QAAQ;AACX,aAAS,MAAM,0BAA0B,KAAK;AAAA;AAKhD,QAAM,OAAO,WAAW,SAAS,mBAAmB,cAAc;AAClE,QAAM,aAAa,WACf,GAAG,cAAc,YAAY,WAAW,gBAAgB,kBACxD,GAAG,OAAO,uBAAuB,iBAAiB,kCAAkC,iBAAiB,WAAW,WAAW;AAE/H,SAAO;AAAA;kCAeP,KACA,QACQ;AACR,MAAI;AACF,UAAM,CAAE,OAAO,MAAM,KAAK,cAAc,YAAaA,gCAAY;AACjE,QACE,CAAC,SACD,CAAC,QACA,iBAAiB,YAChB,iBAAiB,SACjB,iBAAiB,OACnB;AACA,YAAM,IAAI,MAAM;AAAA;AAGlB,UAAM,mBAAmB,SAAS,QAAQ,OAAO;AAEjD,QAAI,OAAO,SAAS,iBAAiB;AACnC,UAAI,CAAC,KAAK;AACR,cAAM,IAAI,MAAM;AAAA;AAElB,aAAO,GAAG,OAAO,2BAA2B,SAAS,YAAY,OAAO;AAAA;AAE1E,WAAO,GAAG,OAAO,uBAAuB,eAAe,YAAY,uBAAuB;AAAA,WACnF,GAAP;AACA,UAAM,IAAI,MAAM,kBAAkB,QAAQ;AAAA;AAAA;oCAU5C,QACa;AACb,QAAM,UAAuB;AAE7B,MAAI,OAAO,OAAO;AAChB,YAAQ,gBAAgB,UAAU,OAAO;AAAA,aAChC,OAAO,YAAY,OAAO,aAAa;AAChD,UAAM,SAAS,OAAO,KACpB,GAAG,OAAO,YAAY,OAAO,eAC7B;AAEF,YAAQ,gBAAgB,SAAS,OAAO,SAAS;AAAA;AAGnD,SAAO;AAAA,IACL;AAAA;AAAA;;ACrJJ,MAAM,cAAc;AACpB,MAAM,sBAAsB;AAC5B,MAAM,sBAAsB;qCA0F1B,QACyB;AAhH3B;AAiHE,QAAM,OAAO,aAAO,kBAAkB,YAAzB,YAAoC;AACjD,MAAI,aAAa,OAAO,kBAAkB;AAC1C,MAAI,aAAa,OAAO,kBAAkB;AAC1C,QAAM,QAAQ,OAAO,kBAAkB;AACvC,QAAM,OAAO,aAAO,uBAAuB,YAA9B,mBAAuC,IAAI;AAAM,IAC5D,OAAO,EAAE,UAAU;AAAA,IACnB,UAAU,EAAE,UAAU;AAAA,IACtB,cAAc,EAAE,UAAU;AAAA,IAC1B,eAAe,EAAE,UAAU;AAAA,IAC3B,YAAY,EAAE,UAAU;AAAA,IACxB,2BAA2B,EAAE,uBAC3B;AAAA;AAIJ,MAAI,CAAC,YAAY,OAAO;AACtB,UAAM,IAAI,MACR,uCAAuC;AAAA;AAI3C,MAAI,YAAY;AACd,iBAAa,WAAW,QAAQ,QAAQ;AAAA,aAC/B,SAAS,aAAa;AAC/B,iBAAa;AAAA;AAGf,MAAI,YAAY;AACd,iBAAa,WAAW,QAAQ,QAAQ;AAAA,aAC/B,SAAS,aAAa;AAC/B,iBAAa;AAAA;AAGf,SAAO,CAAE,MAAM,YAAY,YAAY,OAAO;AAAA;sCAU9C,SAC2B;AAE3B,QAAM,SAAS,QAAQ,IAAI;AAI3B,MAAI,CAAC,OAAO,KAAK,OAAK,EAAE,SAAS,cAAc;AAC7C,WAAO,KAAK;AAAA,MACV,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,YAAY;AAAA;AAAA;AAIhB,SAAO;AAAA;;+BC1IP,KACA,QACA,aACQ;AACR,MAAI;AACF,UAAM,CAAE,OAAO,MAAM,KAAK,cAAc,YAAaA,gCAAY;AACjE,QACE,CAAC,SACD,CAAC,QACD,CAAC,OAGA,iBAAiB,UAChB,iBAAiB,SACjB,iBAAiB,QACnB;AACA,YAAM,IAAI,MAAM;AAAA;AAGlB,UAAM,mBAAmB,SAAS,QAAQ,OAAO;AACjD,QAAI,eAAe,QAAQ,iBAAiB,OAAO;AACjD,aAAO,GAAG,OAAO,oBAAoB,SAAS,iBAAiB,wBAAwB;AAAA;AAEzF,WAAO,GAAG,OAAO,cAAc,SAAS,QAAQ,OAAO;AAAA,WAChD,GAAP;AACA,UAAM,IAAI,MAAM,kBAAkB,QAAQ;AAAA;AAAA;iCAW5C,QACA,aACa;AACb,QAAM,UAAuB;AAE7B,MAAI,eAAe,QAAQ,iBAAiB,OAAO;AACjD,YAAQ,SAAS;AAAA;AAGnB,MAAI,YAAY,OAAO;AACrB,YAAQ,gBAAgB,SAAS,YAAY;AAAA;AAG/C,SAAO,CAAE;AAAA;wBAIT,QACA,aACe;AACf,MAAI,OAAO,2BAA2B,SAAS,CAAC,OAAO,aAAa;AAClE,WAAO;AAAA;AAET,SAAO;AAAA;;ACjET,YAAY;AAAA,EAAZ,cA3BA;AA4BmB,sBAAa,IAAI;AAoB1B,wBAAe,CAAC,SACtB,KAAK,KAAKE,eAAS,SAAS,WAAW,UAAU;AAAA;AAAA,QAhB7C,iBACJ,KACA,UACkC;AAClC,UAAM,OAAO,KAAK,WAAW,IAAI;AACjC,QAAI,QAAQ,KAAK,aAAa,KAAK,YAAY;AAC7C,aAAO,CAAE,aAAa,KAAK;AAAA;AAG7B,UAAM,SAAS,MAAM;AACrB,SAAK,WAAW,IAAI,KAAK;AACzB,WAAO,CAAE,aAAa,OAAO;AAAA;AAAA;AAajC,MAAM,UAAU;AAAA,EACd,QAAQ;AAAA;AAMV,uBAAuB;AAAA,EAMrB,YAAY,QAAyB,SAAkB;AAHtC,iBAAQ,IAAI;AAI3B,SAAK,4BAA4B,OAAO;AACxC,SAAK,iBAAiB;AAAA,MACpB,OAAO,OAAO;AAAA,MACd,YAAY,OAAO;AAAA;AAErB,SAAK,YAAY,IAAIC,aAAQ;AAAA,MAC3B;AAAA,MACA,SAAS;AAAA,MACT,cAAcC;AAAA,MACd,MAAM,KAAK;AAAA;AAAA;AAAA,QAIT,2BACJ,OACA,MACkC;AAvFtC;AAwFI,UAAM,CAAE,gBAAgB,aAAc,MAAM,KAAK,oBAAoB;AACrE,QAAI,KAAK,2BAA2B;AAClC,UAAI,aAAM,8BAAL,mBAAgC,SAAS,SAAQ;AACpD,cAAM,IAAI,MACR,8BAA8B,2DAA2D;AAAA;AAAA;AAI/F,QAAI,WAAW;AACb,YAAM,IAAI,MAAM,8BAA8B;AAAA;AAGhD,UAAM,WAAW,OAAO,GAAG,SAAS,SAAS;AAG7C,WAAO,KAAK,MAAM,iBAAiB,UAAU,YAAY;AACvD,YAAM,SAAS,MAAM,KAAK,UAAU,KAAK,8BAA8B;AAAA,QACrE,iBAAiB;AAAA,QACjB,SAAS;AAAA;AAEX,UAAI,QAAQ,OAAO,KAAK,yBAAyB,YAAY;AAC3D,cAAM,qBAAqB,IAAID,aAAQ;AAAA,UACrC,MAAM,OAAO,KAAK;AAAA;AAEpB,cAAM,QACJ,MAAM,mBAAmB,KAAK;AAChC,cAAM,UAAU,MAAM,KAAK,aAAa,KAAK,gBAAc;AACzD,iBAAO,WAAW,SAAS;AAAA;AAE7B,YAAI,CAAC,SAAS;AACZ,gBAAM,IAAI,MACR,gDAAgD,yEAAyE;AAAA;AAAA;AAI/H,aAAO;AAAA,QACL,OAAO,OAAO,KAAK;AAAA,QACnB,WAAWD,eAAS,QAAQ,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,EAK9C,mBAEE;AACA,WAAO,KAAK,UAAU,SAAS,KAAK,UAAU,KAAK;AAAA;AAAA,QAGvC,oBAAoB,OAA0C;AAC1E,UAAM,mBAAmB,MAAM,KAAK;AACpC,UAAM,eAAe,iBAAiB,KACpC,UAAK;AA3IX;AA2Ic,+BAAK,YAAL,mBAAc,UAAd,mBAAqB,mBAAkB,MAAM;AAAA;AAEvD,QAAI,cAAc;AAChB,aAAO;AAAA,QACL,gBAAgB,aAAa;AAAA,QAC7B,WAAW,QAAQ,aAAa;AAAA;AAAA;AAGpC,UAAM,gBAAgB,IAAI,MACxB,iCAAiC,YAAY,KAAK,eAAe;AAEnE,kBAAc,OAAO;AACrB,UAAM;AAAA;AAAA;8BAK2B;AAAA,EAGnC,YAAY,QAAiC;AA/J/C;AAgKI,SAAK,OACH,mBAAO,SAAP,mBAAa,IAAI,QAAM,IAAI,iBAAiB,IAAI,OAAO,iBAAvD,YAAuE;AAAA;AAAA,QAGrE,sBAEJ;AACA,QAAI,CAAC,KAAK,KAAK,QAAQ;AACrB,aAAO;AAAA;AAGT,UAAM,WAAW,MAAM,QAAQ,IAC7B,KAAK,KAAK,IAAI,SAAO,IAAI;AAG3B,WAAO,SAAS;AAAA;AAAA,QAGZ,YAAY,OAAe,MAA4C;AAC3E,QAAI,KAAK,KAAK,WAAW,GAAG;AAC1B,aAAO;AAAA;AAGT,UAAM,UAAU,MAAM,QAAQ,IAC5B,KAAK,KAAK,IAAI,SACZ,IAAI,2BAA2B,OAAO,MAAM,KAC1C,mBAAkB,aAAa,OAAO,UACtC,aAAY,aAAa,QAAW;AAK1C,UAAM,SAAS,QAAQ,KAAK,gBAAc,WAAW;AACrD,QAAI,QAAQ;AACV,aAAO,OAAO,YAAa;AAAA;AAG7B,UAAM,SAAS,QAAQ,IAAI,OAAK,EAAE;AAClC,UAAM,mBAAmB,OAAO,KAAK,SAAO,IAAI,SAAS;AACzD,QAAI,kBAAkB;AACpB,YAAM;AAAA;AAGR,WAAO;AAAA;AAAA;gCAa4B;AAAA,EAQ7B,YACW,yBACA,OACjB;AAFiB;AACA;AAAA;AAAA,SATZ,OAAO,QAA4D;AACxE,WAAO,IAAI,0BACT,IAAI,wBAAwB,SAC5B,OAAO;AAAA;AAAA,QAkBL,eAAe,MAAmD;AACtE,UAAM,SAASF,gCAAY,KAAK;AAEhC,UAAM,QAAQ,OAAO,SAAS,OAAO;AACrC,UAAM,OAAO,OAAO,QAAQ,OAAO,OAAO;AAE1C,QAAI,OAA6B;AACjC,QAAI,QAAQ,MAAM,KAAK,wBAAwB,YAAY,OAAO;AAClE,QAAI,CAAC,OAAO;AACV,aAAO;AACP,cAAQ,KAAK;AAAA;AAGf,WAAO;AAAA,MACL,SAAS,QAAQ,CAAE,eAAe,UAAU,WAAY;AAAA,MACxD;AAAA,MACA;AAAA;AAAA;AAAA;;ACvOC,iCAAkD;AAAA,EAWvD,YAA6B,mBAA4C;AAA5C;AAAA;AAAA,MAEzB,OAAe;AACjB,WAAO;AAAA;AAAA,MAGL,QAAgB;AAClB,WAAO,KAAK,kBAAkB;AAAA;AAAA,MAG5B,SAAkC;AACpC,WAAO,KAAK;AAAA;AAAA,EAGd,WAAW,SAIA;AAIT,WAAOK,iBAAe,qBAAqB,UAAU;AAAA;AAAA,EAGvD,eAAe,KAAqB;AAClC,WAAOA,iBAAe,KAAK;AAAA;AAAA;;AArCxB,kBACE,UAAqD,CAAC,CAAE,YAAa;AAxB9E;AAyBI,QAAM,UAAU,6BACd,aAAO,uBAAuB,2BAA9B,YAAwD;AAE1D,SAAO,kBACL,QAAQ,IAAI,OAAK,IAAI,mBAAkB,KACvC,OAAK,EAAE,OAAO;AAAA;0BAmClB,KACA,MACQ;AACR,SAAO,IAAI,QACT,qDACA,CAAC,GAAG,MAAM,OAAO,SAAS;AACxB,WAAO,KAAK,QAAQ,SAAS,QAAQ;AAAA;AAAA;;ACpD3C,MAAM,cAAc;AACpB,MAAM,sBAAsB;qCAyC1B,QACyB;AACzB,QAAM,OAAO,OAAO,UAAU;AAC9B,MAAI,aAAa,OAAO,kBAAkB;AAC1C,QAAM,QAAQ,OAAO,kBAAkB;AACvC,MAAI,UAAU,OAAO,kBAAkB;AAEvC,MAAI,YAAY;AACd,iBAAa,WAAW,QAAQ,QAAQ;AAAA,aAC/B,SAAS,aAAa;AAC/B,iBAAa;AAAA;AAGf,MAAI,SAAS;AACX,cAAU,QAAQ,QAAQ,QAAQ;AAAA,SAC7B;AACL,cAAU,WAAW;AAAA;AAGvB,MAAI,KAAK,SAAS,MAAM;AACtB,UAAM,IAAI,MACR,4CAA4C;AAAA,aAErC,CAAC,YAAY,OAAO;AAC7B,UAAM,IAAI,MACR,uCAAuC;AAAA,aAEhC,CAAC,cAAc,CAAC,WAAW,aAAa;AACjD,UAAM,IAAI,MACR,uCAAuC;AAAA,aAEhC,CAAC,WAAW,UAAU;AAC/B,UAAM,IAAI,MACR,uCAAuC;AAAA;AAI3C,SAAO,CAAE,MAAM,OAAO,YAAY;AAAA;sCAUlC,SAC2B;AAE3B,QAAM,SAAS,QAAQ,IAAI;AAI3B,MAAI,CAAC,OAAO,KAAK,OAAK,EAAE,SAAS,cAAc;AAC7C,WAAO,KAAK;AAAA,MACV,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,SAAS,WAAW;AAAA;AAAA;AAIxB,SAAO;AAAA;;qCCzFP,KACA,QACiB;AAIjB,MAAI,IAAI,SAAS,aAAa;AAC5B,UAAM,YAAY,MAAM,aAAa,KAAK;AAC1C,WAAO,gBAAgB,KAAK,WAAW;AAAA;AAEzC,SAAO,YAAY,KAAK;AAAA;iCASxB,QACa;AACb,QAAM,CAAE,QAAQ,MAAO;AACvB,SAAO;AAAA,IACL,SAAS;AAAA,MACP,iBAAiB;AAAA;AAAA;AAAA;qBAQK,QAAqB;AAC/C,MAAI;AACF,UAAM,MAAM,IAAI,IAAI;AAEpB,UAAM,CAAC,OAAO,WAAW,UAAU,gBAAgB,cACjD,IAAI,SAAS,MAAM;AAErB,QACE,UAAU,MACV,cAAc,MACd,aAAa,MACb,gBAAgB,UAChB,CAAC,WAAW,KAAK,KAAK,MAAM,YAC5B;AACA,YAAM,IAAI,MAAM;AAAA;AAIlB,QAAI,WAAW,CAAC,OAAO,WAAW,UAAU,OAAO,GAAG,YAAY,KAAK;AAEvE,WAAO;AAAA,WACA,GAAP;AACA,UAAM,IAAI,MAAM,kBAAkB,WAAW;AAAA;AAAA;yBAOjB,QAAgB,WAAwB;AACtE,MAAI;AACF,UAAM,MAAM,IAAI,IAAI;AAEpB,UAAM,oBAAoB,IAAI,SAAS,MAAM,YAAY;AACzD,UAAM,CAAC,WAAW,YAAY,kBAAkB,MAAM;AAEtD,QAAI,WAAW;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA,mBAAmB,mBAAmB,SAAS,KAAK;AAAA,MACpD;AAAA,MACA,KAAK;AACP,QAAI,SAAS,QAAQ;AAErB,WAAO;AAAA,WACA,GAAP;AACA,UAAM,IAAI,MAAM,kBAAkB,WAAW;AAAA;AAAA;4BAQ/C,QACA,QACiB;AACjB,QAAM,MAAM,IAAI,IAAI;AAEpB,MAAI,CAAC,IAAI,SAAS,SAAS,aAAa;AACtC,UAAM,IAAI,MAAM;AAAA;AAGlB,MAAI;AACF,UAAM,OAAO,IAAI,SAAS,MAAM,YAAY;AAI5C,UAAM,eAAe,IAAI,IACvB,GAAG,IAAI,WAAW,IAAI,4BAA4B,mBAChD,KAAK,QAAQ,OAAO;AAGxB,UAAM,WAAW,MAAMJ,0BACrB,aAAa,YACb,wBAAwB;AAE1B,UAAM,OAAO,MAAM,SAAS;AAE5B,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MACR,iBAAiB,KAAK,WAAW,KAAK;AAAA;AAI1C,WAAO,OAAO,KAAK;AAAA,WACZ,GAAP;AACA,UAAM,IAAI,MAAM,wCAAwC,WAAW;AAAA;AAAA;;ACnIhE,iCAAkD;AAAA,EAWvD,YAA6B,mBAA4C;AAA5C;AAAA;AAAA,MAEzB,OAAe;AACjB,WAAO;AAAA;AAAA,MAGL,QAAgB;AAClB,WAAO,KAAK,kBAAkB;AAAA;AAAA,MAG5B,SAAkC;AACpC,WAAO,KAAK;AAAA;AAAA,EAGd,WAAW,SAIA;AACT,WAAO,qBAAqB;AAAA;AAAA,EAG9B,eAAe,KAAqB;AAClC,WAAO,eAAe,KAAK;AAAA;AAAA;;AAlCxB,kBACE,UAAqD,CAAC,CAAE,YAAa;AAxB9E;AAyBI,QAAM,UAAU,6BACd,aAAO,uBAAuB,2BAA9B,YAAwD;AAE1D,SAAO,kBACL,QAAQ,IAAI,OAAK,IAAI,mBAAkB,KACvC,OAAK,EAAE,OAAO;AAAA;wBAgClB,KACA,MACQ;AACR,SAAO,IAAI,QAAQ,4BAA4B,MAAM;AAAA;;wCC3BrD,QAC4B;AAC5B,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA;AAGT,MAAI,CAAC,OAAO,IAAI,kBAAkB,CAAC,OAAO,IAAI,eAAe;AAC3D,WAAO;AAAA;AAGT,QAAM,aAAa,OAAO,UAAU,cAAc,MAAM,OAAO,KAAK;AAEpE,QAAM,cAAc,OAAO,UAAU;AACrC,SAAO,CAAE,aAA0B;AAAA;;AChCrC,MAAM,kBAAkB;oCAqCtB,QACwB;AAzD1B;AA0DE,QAAM,OAAO,aAAO,kBAAkB,YAAzB,YAAoC;AACjD,QAAM,cAAc,OAAO,kBAAkB;AAC7C,QAAM,kBAAkB,OAAO,kBAAkB;AACjD,QAAM,UAAU,OAAO,kBAAkB;AAEzC,MAAI,CAAC,YAAY,OAAO;AACtB,UAAM,IAAI,MACR,sCAAsC;AAAA;AAI1C,SAAO,CAAE,MAAM,aAAa,iBAAiB;AAAA;qCAI7C,SAC0B;AAE1B,QAAM,SAAS,QAAQ,IAAI;AAI3B,MAAI,CAAC,OAAO,KAAK,OAAK,EAAE,SAAS,kBAAkB;AACjD,WAAO,KAAK;AAAA,MACV,MAAM;AAAA;AAAA;AAGV,SAAO;AAAA;;ACjEF,gCAAiD;AAAA,EAuBtD,YAA6B,mBAA2C;AAA3C;AAAA;AAAA,MAZzB,OAAe;AACjB,WAAO;AAAA;AAAA,MAGL,QAAgB;AAClB,WAAO,KAAK,kBAAkB;AAAA;AAAA,MAG5B,SAAiC;AACnC,WAAO,KAAK;AAAA;AAAA,EAId,WAAW,SAIA;AACT,UAAM,WAAW,qBAAqB;AACtC,WAAO;AAAA;AAAA,EAGT,eAAe,KAAqB;AAElC,WAAO;AAAA;AAAA;;AAnCJ,iBACE,UAAoD,CAAC,CAAE,YAAa;AArB7E;AAsBI,QAAM,UAAU,4BACd,aAAO,uBAAuB,0BAA9B,YAAuD;AAEzD,SAAO,kBACL,QAAQ,IAAI,OAAK,IAAI,kBAAiB,KACtC,OAAK,EAAE,OAAO;AAAA;;sBCO2C;AAAA,SAGtD,WAAW,QAAiC;AACjD,WAAO,IAAI,gBAAgB;AAAA,MACzB,OAAO,iBAAiB,QAAQ,CAAE;AAAA,MAClC,OAAO,iBAAiB,QAAQ,CAAE;AAAA,MAClC,WAAW,qBAAqB,QAAQ,CAAE;AAAA,MAC1C,QAAQ,kBAAkB,QAAQ,CAAE;AAAA,MACpC,QAAQ,kBAAkB,QAAQ,CAAE;AAAA;AAAA;AAAA,EAIxC,YAAY,oBAAwC;AAClD,SAAK,SAAS;AAAA;AAAA,MAGZ,QAAgD;AAClD,WAAO,KAAK,OAAO;AAAA;AAAA,MAGjB,QAAgD;AAClD,WAAO,KAAK,OAAO;AAAA;AAAA,MAGjB,YAAwD;AAC1D,WAAO,KAAK,OAAO;AAAA;AAAA,MAGjB,SAAkD;AACpD,WAAO,KAAK,OAAO;AAAA;AAAA,MAGjB,SAAkD;AACpD,WAAO,KAAK,OAAO;AAAA;AAAA,EAGrB,OAAyB;AACvB,WAAO,OAAO,OAAO,KAAK,QAAQ,QAChC,OAAK,EAAE;AAAA;AAAA,EAIX,MAAM,KAA+C;AACnD,WAAO,OAAO,OAAO,KAAK,QACvB,IAAI,OAAK,EAAE,MAAM,MACjB,KAAK;AAAA;AAAA,EAGV,OAAO,MAA0C;AAC/C,WAAO,OAAO,OAAO,KAAK,QACvB,IAAI,OAAK,EAAE,OAAO,OAClB,KAAK;AAAA;AAAA,EAGV,WAAW,SAIA;AACT,UAAM,cAAc,KAAK,MAAM,QAAQ;AACvC,QAAI,CAAC,aAAa;AAChB,aAAO,qBAAqB;AAAA;AAG9B,WAAO,YAAY,WAAW;AAAA;AAAA,EAGhC,eAAe,KAAqB;AAClC,UAAM,cAAc,KAAK,MAAM;AAC/B,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA;AAGT,WAAO,YAAY,eAAe;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}