declare type JsonPrimitive = number | string | boolean | null;
declare type JsonObject = {
    [key in string]?: JsonValue;
};
interface JsonArray extends Array<JsonValue> {
}
declare type JsonValue = JsonObject | JsonArray | JsonPrimitive;
declare type AppConfig = {
    context: string;
    data: JsonObject;
    filteredKeys?: string[];
};
declare type Config = {
    /**
     * Subscribes to the configuration object in order to receive a notification
     * whenever any value within the configuration has changed.
     *
     * This method is optional to implement, and consumers need to check if it is
     * implemented before invoking it.
     */
    subscribe?(onChange: () => void): {
        unsubscribe: () => void;
    };
    has(key: string): boolean;
    keys(): string[];
    get<T = JsonValue>(key?: string): T;
    getOptional<T = JsonValue>(key?: string): T | undefined;
    getConfig(key: string): Config;
    getOptionalConfig(key: string): Config | undefined;
    getConfigArray(key: string): Config[];
    getOptionalConfigArray(key: string): Config[] | undefined;
    getNumber(key: string): number;
    getOptionalNumber(key: string): number | undefined;
    getBoolean(key: string): boolean;
    getOptionalBoolean(key: string): boolean | undefined;
    getString(key: string): string;
    getOptionalString(key: string): string | undefined;
    getStringArray(key: string): string[];
    getOptionalStringArray(key: string): string[] | undefined;
};

declare class ConfigReader implements Config {
    private readonly data;
    private readonly context;
    private readonly fallback?;
    private readonly prefix;
    /**
     * A set of key paths that where removed from the config due to not being visible.
     *
     * This was added as a mutable private member to avoid changes to the public API.
     * Its only purpose of this is to warn users of missing visibility when running
     * the frontend in development mode.
     */
    private filteredKeys?;
    private notifiedFilteredKeys;
    static fromConfigs(configs: AppConfig[]): ConfigReader;
    constructor(data: JsonObject | undefined, context?: string, fallback?: ConfigReader | undefined, prefix?: string);
    has(key: string): boolean;
    keys(): string[];
    get<T = JsonValue>(key?: string): T;
    getOptional<T = JsonValue>(key?: string): T | undefined;
    getConfig(key: string): ConfigReader;
    getOptionalConfig(key: string): ConfigReader | undefined;
    getConfigArray(key: string): ConfigReader[];
    getOptionalConfigArray(key: string): ConfigReader[] | undefined;
    getNumber(key: string): number;
    getOptionalNumber(key: string): number | undefined;
    getBoolean(key: string): boolean;
    getOptionalBoolean(key: string): boolean | undefined;
    getString(key: string): string;
    getOptionalString(key: string): string | undefined;
    getStringArray(key: string): string[];
    getOptionalStringArray(key: string): string[] | undefined;
    private fullKey;
    private copy;
    private readConfigValue;
    private readValue;
}

export { AppConfig, Config, ConfigReader, JsonArray, JsonObject, JsonPrimitive, JsonValue };
